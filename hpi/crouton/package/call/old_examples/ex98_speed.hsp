// ex23 : 実行速度

#include "call.as"

// @ WrapCall を使っている場合は切っておく。
// @from: http://hsp.tv/play/pforum.php?mode=all&num=39714

//------------------
	#include "d3m.hsp"
	#define global N 100000;0

#module
#deffunc userdef_sttm
	return
	
#defcfunc userdef_func
	return 0
	
#global
	
#define speed_test(%1, %2, %3 = process, %4 = N) \
	start = d3timer()			:\
		repeat (%4) : %3 : loop		:\
	time = d3timer() - start	:\
	mes "" + (%1) + "(" + (%2) + ")：" + time //
//------------------

	mes "N = " + N
	
	// 呼び出しテスト
	fLbSttm  = functor( *LSttm )
	fDefSttm = functor( defidOf(userdef_sttm) )
	fLbFunc  = functor( *LFunc )
	fDefFunc = functor( defidOf(userdef_func) )
	
	speed_test "命令[0]", "gosub ラベル",    gosub *LSttm
	speed_test "命令[0]", "ユーザ定義命令",  userdef_sttm
	speed_test "命令[0]", "call ラベル",     call( *LSttm )
	speed_test "命令[0]", "call deffunc",    call defidOf(userdef_sttm)
	speed_test "命令[0]", "call functor(L)", call fLbSttm
	speed_test "命令[0]", "call functor(F)", call fDefSttm
	
	speed_test "関数[0]", "ユーザ定義関数",  _r = userdef_func()
	speed_test "関数[0]", "call ラベル",     _r = call( *LFunc )
	speed_test "関数[0]", "call deffunc",    _r = call( defidOf(userdef_func) )
	speed_test "関数[0]", "call functor(L)", _r = call( fLbSttm )
	speed_test "関数[0]", "call functor(F)", _r = call( fDefFunc )
	speed_test "関数[0]", "functor idx(L)",  _r = fLbSttm()
	speed_test "関数[0]", "functor idx(F)",  _r = fDefFunc()
	
	mes "ok"
	stop
	
*LSttm
	return
	
*LFunc
	return 0
