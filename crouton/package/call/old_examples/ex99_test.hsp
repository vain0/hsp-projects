// call.hpi - sample XX

#include "call_modcls.as"

// テスト

#module Test value, name, bDup

#modinit int _value, str _name, int _bDup
	bDup = _bDup
	name = _name
	test_set thismod, _value
	
	mes "new >> " + name + ": " + value + " $" + bDup
	return
	
#modterm
	mes "del << " +  name + ": " + value + " $" + bDup
	wait 60
	return
	
#modfunc test_set int x
	value = x
	return
	
#modcfunc test_get
	return value
	
#modcfunc test_getName
	return name
	
#modfunc test_dup_fact var x
	newmod x, Test, value, name + "'", true
	return
	
#modfunc test_mul var x
	mes strf("mul: %d(%s) * %d(%s)", value, name, test_get(x), test_getName(x))
	value *= test_get(x)
	return
	
#modfunc test_pow var x,  local n
	mes strf("pow: %d(%s) ^ %d(%s)", value, name, test_get(x), test_getName(x))
	n = test_get(x)
	if ( n < 1 ) { return }		// error
	
	dupmod thismod, c
	repeat n - 1
		c *= modcls_thismod
	loop
	value = test_get(c)
;	value = int( powf( value, test_get(x) ) )
	return
	
#modcfunc test_cmp var x, int opId
	mes strf("cmp: %d(%s) <> %d(%s)", value, name, test_get(x), test_getName(x))
	return value - test_get(x)
	
// 型変換関数
#modcfunc test_toInt int flag
	return int(value)
	
#modcfunc test_toStr int flag
	return str(value)
	
#modcfunc test_toDouble int flag
	return double(value)
	
// 登録
#deffunc test_init
	modcls_register Test, OpId_Mul, test_mul
	modcls_register Test, OpId_Xor, test_pow	// ^
	
	modcls_register Test, OpId_Dup, test_dup_fact
	modcls_register Test, OpId_Cmp, test_cmp
	
	modcls_register Test, OpId_ToStr,    test_toStr
	modcls_register Test, OpId_ToDouble, test_toDouble
	modcls_register Test, OpId_ToInt,    test_toInt
	return
	
#global
	test_init
	
	// サンプル
	mes newmod(Test, 3, "c") * (newmod(Test, 4, "d") * newmod(Test, 5, "e"))
;	newmod a, Test, 1, "a"
;	newmod b, Test, 2, "b"
;	newmod c, Test, 3, "c"
	
	// 一時オブジェクトの破壊
	//c3 = c * c * c
	;mes "b^2 = " + (b * b)
	;mes "c^3 = " + (c * (c * c))
	
/*

#module

#deffunc test
*LTest@
	mes "Hello, world!"
	return
	
#global

	a = labelOf(test)
	b = *LTest@
;	(a == b)
	

