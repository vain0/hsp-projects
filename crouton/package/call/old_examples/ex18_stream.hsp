// call.hpi - sample 18

#include "call.as"

// ストリーム呼び出しオブジェクト
// @cf: ex07_stream

// @ ストリーム呼び出しとは、引数を複数回に分けて設定する呼び出し方。
// @	動的な個数の引数を渡すことができる。

// stream_call_new( functor f )
// @ 関数子 f のストリーム呼び出しオブジェクトを生成する。

// stream_call_add functor f, args...
// @ ストリーム呼び出しオブジェクト f に実引数 args... を追加する。

// (使い方)
// @ ストリーム呼び出しオブジェクトを call すると、
// @	関数を指定された引数列をもって呼び出す。
// @ 例えば、関数 f のストリーム呼び出しオブジェクト streamF は、
// @	stream_call_add streamF, 1, 2 を実行した後では、
// @	streamF() という呼び出しで call( f, 1, 2 ) が実行される。
// @	また、streamF( x... ) と呼び出すと call( f, 1, 2, x... ) が実行される。
// @	つまり、引数が前方から束縛されていくと考えてよい。
	
	call_dec *LSum, "any", "local", "..."
	
	// ストリーム呼び出しオブジェクトの生成
	sum = stream_call_new( *LSum )
	
	// 数列 1, 2, 3, ... の部分和を出力する
	N = 10
	
	repeat N, 1
		stream_call_add sum, cnt			// 引数として cnt を追加
		mes "S[" + cnt + "]\t= " + sum()	// sum() = call( *LSum, 1,  2, 3, ..., cnt )
	
		assert( sum() == (cnt * (cnt + 1)) / 2 )
	loop
	
	// 呼び出し時に引数を与える
	mes "S[" + (N + 3) + "]\t= " + sum( N + 1, N + 2, N +3 )
	
	assert( sum( N + 1, N + 2, N + 3 ) == ((N + 3) * (N + 4)) / 2 )
	stop
	
// 引数列の総和を取る関数
#defcfunc lbf_sum var valFirst, local lcSum
*LSum
	lcSum = valFirst
	repeat argc, 1
		lcSum += argv(cnt)
	loop
	return lcSum
