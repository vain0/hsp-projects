// call.hpi - sample 10

#include "call.as"

// ラベル命令・関数の仮引数宣言

// call_dec label, prms...
// @ ラベル関数を仮引数宣言する。
// @ 仮引数宣言されたラベルを call するときは、この仮引数を利用して引数の受け取りを行う。
// @	型チェック、引数の数のチェックなど。
// @	また、引数エイリアスが #deffunc などと同じように使用されるようになる。

// 仮引数リストには、以下のものを指定できる。
// @ 型タイプ値
// @	vartype() の値。その型の値を受け取る。
// @ 型名
// @	"int" など。
// @ 特殊引数タイプ
// @	"var"   : 変数を受け取る。#deffunc の var と同じ。
// @	"array" : 配列を受け取る。〃。
// @	"any"	: 任意の値を受け取る (ex13_prmtype_any で追加)。
// @	"local":
// @		ローカル変数を末尾に1つ追加する (ex15_prmtype_local で追加)。
// @		#deffunc の local に対応させるもの。
// @	"...":
// @		[ "flex" でもよい ]
// @		可変長引数であることを示す。
// @		仮引数リストのどの位置にあっても関係はない。
// @			"int", "...", "str" と書いても (int, str, ...) という仮引数になる。

// @ 仮引数宣言の利点
// @	* 引数の型が間違っているときに、エラーを出してくれる。
// @	* 省略したときに適切な値が入る、またはエラーになってくれる：
// @		str: "", double: 0.0, int: 0
// @	* 参照渡しか否かを判断できる。
// @		いちいち byref を書く必要がない。
// @		逆に、参照渡しが欲しいところに値を書くと、エラーを出してくれる。
// @	* #deffunc の引数タイプを正しく使うことができる。

	gosub *LInitialize
	
	call *false_printf, "ラベル%prm% *%prm% は%prm%宣言されています。", "命令", "false_printf", "仮引数"
	
	// [0, 10) の整数リスト ( 0〜10、0 は含むが 10 は含まない、昇順 )
	call *setRange, intlist, 0, 10
	
	foreach intlist
		call *false_printf, "intlist(%prm%) = %prm%", cnt, intlist(cnt)
		assert( intlist(cnt) == cnt )
	loop
	
	// (3, 0]← の整数リスト ( 0〜3、0 は含まず 3 は含む、降順 )
	call *setRange, intlist2, 3, ; 省略
	foreach intlist2
		call *false_printf, "intlist2(%prm%) = %prm%", cnt, intlist2(cnt)
		assert( intlist2(cnt) == 3 - cnt )
	loop
	
	stop
	
*LInitialize
	// 仮引数宣言を行う (実行する必要がある)
	call_dec *false_printf, "str", "..."
	call_dec *setRange,     "array", "int", "int"
	return
	
//------------------------------------------------
// 偽 printf
// 
// @ %prm% を引数に置換します。
// @ 速度・利便性のことは考えていません
//------------------------------------------------
*false_printf
	sdim sform
	sform = argv(0)
	index = 0
	
	// "%prm%" を、引数ごとに置き換える
	repeat argc - 1							// argc は引数の数
		n = instr(sform, index, "%prm%")
		if ( n < 0 ) { break }
		
		index += n
		sform  = strmid(sform, 0, index) + argv(cnt + 1) + strmid(sform, index + 5, strlen(sform) - (index + 5))
	loop
	
	mes sform
	
	return
	
//------------------------------------------------
// 整数値のリストを配列に格納する
// 
// @test : 参照渡し
// @test : #deffunc エイリアスの標準的利用
//------------------------------------------------
#deffunc lbf_setRange array arr, int a, int b
*setRange
	if ( a <= b ) {
		dim arr, b - a
		
		foreach arr : arr(cnt) = cnt + a : loop
	} else {
		dim arr, a - b
		
		foreach arr : arr(cnt) = a - cnt: loop
	}
	return
	
