// call - test code 00

#include "call.as"
#include "call_modcls.as"
#include "call_for_sample.as"

#undef stop
#define global stop logmes "ok" : return

#module

#deffunc test2
#include "ex02_lbArg.hsp"

#deffunc test3
#include "ex03_ctype.hsp"

#deffunc test4
#include "ex04_deffunc.hsp"

#deffunc test5
;#include "ex05_in_module.hsp"
	return
#deffunc test6
#include "ex06_return_lb.hsp"

#deffunc test7
;#include "ex07_stream.hsp"
	return
#deffunc test8
#include "ex08_call_deffunc.hsp"

#deffunc test9
;#include "ex09_call_modfunc.hsp"
	return
#deffunc test10
#include "ex10_decprm.hsp"

#deffunc test11
;#include "ex11_dec_modfunc.hsp"
	return

#global

	test2
	test3
	test4
	test5
	test6
	test7
	test8
	test9
	test10
	test11
	
	dialog "ok"
	end

/*
// 可読性の低いテストは良くない
	// 値渡し
	call *lb_test1, 1, "two", 3.14, *lb_test1_in
	do_not {
*lb_test1
		if ( flag ) { flag = false : return }
		assert argc == 4
		assert argv(0) == 1
		assert argv(1) == "two"
		assert argv(2) == 3.14
	;	assert argv(3) == *lb_test1_in		// ラベルは比較不可能
		call argv(3)						// 実際に飛べるか確かめる
		assert flag == true
		call call_thislb
		assert flag == false
		
		refarg(0) = 3
		refarg(1) = "zwei"
		refarg(2) = 2.71
		assert argv(0) == 3
		assert argv(1) == "zwei"
		assert argv(2) == 2.71
		return
		do_not { *lb_test1_in : flag = true : return }
	}
	
	// 参照渡し
	a = 10, 20 : b = "s"
	call *lb_test2, byref a, b
	do_not {
*lb_test2
		refarg(0) = 100, 200 
		refarg(1) = 7
		return
	}
	assert a(0) == 100 && a(1) == 200
	assert b == "s"
	
	// 返値
	a = call(*lb_test3_a)
		assert stat == 10
		assert a == 10
		assert call_result() == a
	b = call(*lb_test3_b)
		call b
		assert flag == true
		flag = false
	c = call(*lb_test3_c)
		assert refstr != "prograpark"
		assert c      == "prograpark"
		assert call_result() == c
	do_not {
*lb_test3_a
		return 10
*lb_test3_b
		call_return *lb_test3_b_in
*lb_test3_c
		call_return "prograpark"
*lb_test3_b_in
		flag = true : return
	}
	
	// deffunc
	a = defidOf( f_lb_test4 )
	b = 1, 2, 3
	call a, 3, "pi", 3.14, byref a, byref b
	#module
	#deffunc f_lb_test4 int p1, str p2, double p3, var p4, array p5,  local ll
*lb_test4@
		ll = p1 * p3
		assert p1 == 3
		assert p2 == "pi"
		assert p3 == 3.14
		assert p4 == defidOf(f_lb_test4)
		assert length(p5) == 3 && p5(0) == 1 && p5(1) == 2 && p5(2) == 3
		p4 = "change vartype"
		p5(7) = 7
		return
	#defcfunc f_test5_a var p1, var p2
		return p1 * p2
	#defcfunc f_test5_b int p1, int p2
		call_return p1 * p2
	#global
	assert a == "change vartype"
	assert b(7) == 7
	assert call( labelOf(f_test5_a), 5, 7 ) == 35
	assert call( defidOf(f_test5_b), 5, 7 ) == 35
	
	// functor (basic)
	a = functor( *lb_test6 )
	b = functor( defidOf( f_test6 ) )
	#module
*lb_test6@
		assert argv(0) == 1
		assert argv(1) == 2
		refarg(0) = 5
		refarg(1) = 7
		return argv(0) * argv(1)
	#deffunc f_test6 int p1, int p2
		assert p1 == 3
		assert p2 == 5
		call_return p1 * p2
	#global
	call a, 1, 2		// call による呼び出し
	assert stat == 35
	assert call(a, 1, 2) == 35
	call b, 3, 5
	assert stat != 15
	assert call(b, 3, 5) == 15
	assert call_result() == 15
	
	a->"call" 1, 2		// 自身による呼び出し
	assert stat == 35
	assert call_result() != 35
	assert a(1, 2) == 35
	assert call_result() == 35
	b->"call" 3, 5
	assert stat != 15
	assert call_result() != 15
	assert b(3, 5) == 15
	assert call_result() == 15
	
	c = a, b		// 配列
	assert length(c) == 2 && c(0) == a && c(1) == b
	dim c
	c = a
	d = b
	assert c == a
	assert d == b
	
	// functor (extra)
	// label, functor(label), deffid, functor(deffid) について
	repeat 4
		if ( cnt & 2 == 0 ) { f = *lb_test7 : arg = 21, 3 : r = 7 }
		else { f = defidOf(f_test7) : arg = 12, 6 : r = 2 }
		if ( cnt & 1 ) { f = functor(f) } 
		
		a = argbind( f, arg(0) )		// 前方束縛
		assert call( a, arg(1) ) == r
		assert a( arg(1) ) == r
		b = argbind( a, arg(1) )	// 二重束縛
		assert b() == r
		c = argbind( f, nobind, arg(1) )	// 不束縛引数
		assert call(c, arg(0)) == r
		assert c( arg(0) ) == r
		d = argbind( f, nobind(1), nobind(0) )	// 不束縛引数 (優先順位)
		assert d( arg(1), arg(0) ) == r
	loop
	
	#module
*lb_test7@
		assert argv(0) == 21
		assert argv(1) == 3
		return argv(0) / argv(1)
	#deffunc f_test7 int p1, int p2
		assert p1 == 12
		assert p2 ==  6
		return p1 / p2
	#global
	
	// stream
	a = stream_call_new( labelOf(f_test8) )
	repeat 3, 1
		stream_call_add a, cnt
		assert a() == (cnt * (cnt + 1)) / 2
	loop
	assert a(4) == (1 + 2 + 3 + 4)
	
	#module
	#deffunc f_test8
		n = 0
		repeat argc
			assert argv(cnt) == cnt + 1
			n += cnt + 1
		loop
		return n
	#global
	
	// funcexpr
	// coroutine
	// label宣言
	// method
	// modcls
	
	
	dialog "ok"
	end
//*/
