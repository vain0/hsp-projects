// call.hpi - sample 19

#include "call.as"
#include "hpi/opex/opex.as"
// 式から関数を生成する

// funcexpr( expr0, expr1, ..., exprN )
// @ 「式 exprI を左から順に評価して、exprN の値を返却する関数」を生成する。
// @	functor 型の値が返る。
// @ 式の中に書いた __pI は、その関数が呼ばれたときの I 番目の引数を表す。
// @ また、exprI の値は __vI で参照できる。

	f = funcexpr( 1, 2, __v0 + __v1 )
	assert( f() == 3 )
	
	g = funcexpr( assign(a, __p0), funcexpr( a + __p0 ) )
	h = g(1)
	x = h(2)
	mes x
	
;	f2 = f( 10 )	// パラメータの数が多すぎます (？)
	stop
	
/*
	// 定数
	fConst = funcexpr( logging(1 + 2 * 3) )		// logging は呼ばれていない
	mes ">> fConst: 定数関数"
	mes "1 + 2 * 3 = " + fConst()		// logging が呼ばれる
	
	// 引数
	fBin = funcexpr( sqrt(__p0) * sin(__p1) )
	mes ">> fBin: 2変数関数"
	mes "fBin(x, y) := √x・sin y"
	mes "fBin(3, π/6) = " + fBin( 3, deg2rad(60) )
	
	// 入れ子
	ffAdd = funcexpr( funcexpr(__p0 + __p0) )
	fAdd3 = ffAdd( 3 )
	;mes fAdd3( 6 )
	stop
	
#defcfunc logging int x
	mes "logging: " + x
	return x
	
//*/
	
//--------------------
/*
#module
#deffunc test var f, local x
	x = 1, 2, 3
	f = funcexpr( x(1) )	// 引数エイリアスを評価する (引数の複製を得る)
;	x = "a", "b", "c"		// x を変更しても f() が参照する x は変化しない
	return
	
#global

	test f
	mes f()
	stop
//*/

//--------------------
/*
#module
// 文字列をログ出力する関数
#defcfunc logging str x
	mes "#log: \"" + x + "\""
	return x
	
#deffunc test var dst, var x
	dst = funcexpr( x )		// 引数エイリアスを評価する
	return
	
#global
	
	a = "hello", "world"
	test f, a(1)
	;stop

	// 定数関数
	mes "funcexpr-new : constexpr"
	f_c = funcexpr( logging("constexpr") )	// func() { logging("constexpr") }
	
	// 引数を取る関数
;	f_p = funcexpr( logging(__p0) )
	
	mes
	
	// 呼び出してみる
	mes "funcexpr-call"
;	a = "a String"
	
	mes "f_c( ) = " + f_c()
;	mes "f_p(a) = " + f_p(a)
	
	stop
	
//*/
