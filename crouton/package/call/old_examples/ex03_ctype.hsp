// call.hpi - sample 3

#include "call.as"
#include "call_for_sample.as"		// サンプル用

// 関数形式で呼び出す

// @ call は関数形式で記述できる。
// @	call( label, args... )
// @ 返値は call_retval で設定するか、return で普通に返す。
// @	両方用いた場合、後者(return)が優先される。
// @	前者を複数回呼び出していた場合、最後に呼び出されたときの値が返値となる。
// @	前者なら label 型など、特殊な型でも返せる。
// @	後者なら、通常通りシステム変数に値が格納される。
// @	( コストはどちら大差なし )

// call_result()
// @ call プラグインによる呼び出しの最後の返値を得る。
// @	返値が無視される、例えば命令形式 call などの呼び出しの返値は得られない。

	assert call( *powi, 2, 5 ) == 32	// 2^5 (= 32)
	assert stat == 32
	assert call_result() == 32			// 直前の call() の戻り値
	
	call *powi, 3, 4			// 命令形式での呼び出しも可能
	assert stat == 81			// この場合、return を使わなければ返値は取れない
	assert call_result() != 81	// 命令形式で呼んだので書き換わらない
	
	stop
	
// 累乗関数
*powi
	call_aliasAll base, exp
	
	if ( exp <= 0 ) { return 0 }
	
	nRet = 1
	repeat exp
		nRet *= base		// * base を反復
	loop
	
	return nRet
