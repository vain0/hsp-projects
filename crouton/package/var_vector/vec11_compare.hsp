#include "var_vector.as"

// 比較演算

#define global ctype say(%1) _b = (%1) : mes "%1 : " + (_b) : assert _b

// 同値比較 (==, !=)
// 左右が、同じ内部変数を同じ順番で持っている場合、「等しい」という。
// 内部変数が同じ値を持っていてもダメで、参照として等しい場合のみ等しいとする。

	// 要素数 3
	v0 = vector( 0, 1, 2 )
	
	// v1, v2, v3 をそれぞれ v0 のスライスとする。
	v1 = v0
	v2 = v0
	v3 = v0
	
	// v2 の、内部変数の値を変更する。
	// スライスなので v0(0) と同じ変数を書き換えている。
	v2(0) = 100
	
	// v3 に4個目の要素を追加する。
	v3(3) = 3
	
	// v4 は v0 の複製
	v4 = VectorDup(v0)
	
	say(v0 == v1)	// 当然
	say(v1 == v2)
	say(v2 != v3)	// 実際は (v2 < v3)
	say(v4 != v0)
	
// 順序比較 (<, >)
// あまり意味はないが、ソートされるときのために形式的に定義しておく。
// 左右で要素数が異なる場合、それの大小をそのまま、vector の大小とする。
// 左右が等しくない場合、左辺の方が小さいことにする。(数学でいう「順序」をなしていない。)

	say(v3 > v1)
	say(v4 < v0)
	say(v0 < v4)
	
	mes "以上"
	stop
