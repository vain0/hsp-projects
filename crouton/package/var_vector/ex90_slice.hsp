// ex01 : vector slice

#include "var_vector.as"

// スライス(Slice)
// @ 配列(vector)の一部を切り出したものを「スライス」と言う。

// 区間 [a, b)
// @ ( a < b とする )
// @ 簡単にいえば「a 以上で b 未満の範囲」のこと。
// @ ちなみに、"[" は境界値を含み、"(" は含まないことを示す。
// @	[a, b] は「a 以上 b "以下"」の範囲、
// @	(a, b] は「a より大きく b 以下」の範囲、となる。
// @ex: 配列 [p, q, r, s] の区間 [1, 3) は [q, r]
// @ また、a > b となるときは、区間が反転しているものとして扱う。

// @ v()
// @	vector v の全区間をスライスとして返す。これは v と等しい。
// @	ちなみに、var_assoc の無更新参照とは異なるので注意。

// @ VectorSlice( v, iBgn, iEnd )
// @	v の区間 [iBgn, iEnd) の要素を持つ vector を返す。
// @	要素がない場合は null を返す。
// @	生成されたスライスは、元の vector を覚えていない。
// @	各要素は元の vector の内部変数と同一のものである。

// @ VectorSliceOut( v, iBgn, iEnd )
// @	v の区間 [iBgn, iEnd) 以外の部分を返す。
// @	全区間スライスを取って、指定区間を捨てるイメージ。
// @	2つのスライスの連結 [0, iBgn) + [iEnd, Length) に等しい。
// @	反転区間 (iBgn > iEnd) のときは、とったスライスの反転を返却する。
// @	なお、VectorRemove との差は反転区間に対応しているか否かでしかない。

// 連結：加法(+)
// @	左右の vector を連結する。
// @	左辺が持つ内部変数と、右辺が持つ内部変数を一直線上に並べ直した
// @	vector が生成され、それが返る。
// @ex:	[ 1, 2 ] + [ 3, 4 ] → [ 1, 2, 3, 4 ]

// なお、スライスは内部変数への強い参照を持つ。
// 則ち、元の vector が死んでも、スライスが生きていれば、
// それが保有する内部変数も生き残る。

#define ctype vec_toString(%1) "[" + VectorJoin((%1), ", ") + "]"	// cf. ex06

	mes ">> init..."
	v = vector( 0, 1, 2, 3, 4, 5, 6 )
	mes "v = " + vec_toString(v)
	
	// スライスをとる
	mes ">> u <- スライス v [2..4)"	// つまり u(0) は v(2)、u(1) は v(3) と同じ内部変数を持つ
	u = VectorSlice( v, 2, 4 )		// [2], [3] のスライス
	mes "u = " + vec_toString(u)
	
	assert (u(0) == 2 && u(1) == 3)
	
	// 内部変数参照の同一性を示す
	mes ">> u(1) = \"Δ\""
	u(1) = "Δ"
	mes "u(1) = " + u(1)
	mes "v(3) = " + v(3)
	
	assert (u(1) == v(3))
	
	// スライス連結
	mes ">> s := u + v"
	s = u + v
	mes "s = " + vec_toString(s)
	
	assert (VectorSize(s) == VectorSize(u) + VectorSize(v) && s(0) == u(0) && s(1) = u(1) && s(2) == v(0))
	
	// 反転区間スライス
	mes ">> w <- スライス v [3..-1); スライス v (-1..3] の反転に等しい"
	w = VectorSlice( v, 3, -1 )
	mes "w = " + vec_toString(w)
	
	assert (w(0) == v(3) && w(1) == v(2) && w(2) == v(1) && w(3) == v(0))
	
	// 区間排除スライス
	mes ">> x <- 排除スライス v [4..2); 区間 [4..2) を除くスライス"
	x = VectorSliceOut( v, 4, 2 )
	mes "x = " + vec_toString(x)
	
	assert (x(0) == v(6) && x(1) == v(5) && x(2) == v(2) && x(3) == v(1) && x(4) == v(0))
	
	mes "complete."
	stop

/*
	v = vector( 0, 1, 2, 3, 4, 5, 6 )
	
	VectorForeach v
		mes "v(" + cnt + ") = " + v(cnt)
	VectorForeachEnd
	mes
	
	//
	mes "s := slice [2, 5) in v"
	s = VectorSlice( v, 2, 5 )			// v[2..5]
	
	VectorForeach s
		mes "s(" + cnt + ") = " + s(cnt)
	VectorForeachEnd
	
	// 内部変数が同一であることを示す
	mes "s(1) ← Hello, world!"
	
	s(1) = "Hello, world!"		// s に与えた代入が
	mes "v(3) == " + v(3)		// v に反映されている (s(1) ≡ v(3))
	mes
	
	//
	mes "p := v + s"
	p = v + s
	
	VectorForeach p
		mes "p(" + cnt + ") = " + p(cnt)
	VectorForeachEnd
	
	stop
	
