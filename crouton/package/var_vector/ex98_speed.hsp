// ex03 : 実行速度(読み書き)

#include "var_vector.as"

// @ WrapCall を使用している場合は、切っておく。
// @from: http://hsp.tv/play/pforum.php?mode=all&num=39714

//------------------
	#include "d3m.hsp"
	#define N 100000;0

#module m_A f
	
	#modinit int _size
		dim f, _size
	return
	
	#modcfunc get_a_f int i0
	return f(i0)
	
	#modfunc set_a_f int i0, int i1
		f(i0) = i1
	return
	
	#modfunc get_a_Address var o
		dup o, f
	return
	
#global

#define speed_test(%1, %2, %3 = process, %4 = N) \
	start = d3timer()			:\
		repeat (%4) : %3 : loop		:\
	time = d3timer() - start	:\
	mes "" + (%1) + "(" + (%2) + ")：" + time //

#define ctype proc_repeat(%1 = count, %2 = process) \
	repeat (%1) : %2 : loop	//

//------------------

	mes "N = " + N
	
	// 生成テスト
	speed_test "生成", "普通の変数",  dim variable,  N/10
	speed_test "生成", "vector",      vector vec,    N/10
	
	// 書き込みテスト
	dim variable, N
	newmod module, m_A, N
	get_a_Address module, f
	vector vec, N
	vector vec2
	VectorDim vec2(0), vartype("int"), N
	
	#define set_to_mod set_a_f module, cnt, rnd(100)		// 書き込み用コマンド
	
	speed_test "書込", "普通の変数",             variable(cnt) = rnd(100)
	speed_test "書込", "モジュールへ命令で",     set_to_mod
	speed_test "書込", "モジュールへアドレスで", f(cnt) = rnd(100)
	speed_test "書込", "vector",               vec(cnt) = rnd(100)
	speed_test "書込", "vector 内部変数",  vec2(0, cnt) = rnd(100)
	
	// 読み出しテスト
	speed_test "読出", "普通の変数",                k = variable(cnt)
	speed_test "読出", "モジュールから関数で",      k = get_a_f( module, cnt )
	speed_test "読出", "モジュールからアドレスで",  k = f(cnt)
	speed_test "読出", "vector",                    k = vec(cnt)
	speed_test "読出", "vector 内部変数",           k = vec2(0, cnt)
	
	// 拡張テスト
	dim variable, 1
	speed_test "拡張", "標準配列", variable(cnt) = rnd(100), N/10
	dim variable
	
	dim module
	newmod module, m_A, 1
	speed_test "拡張", "モジュールを命令で", set_to_mod, N/10
	dim module
	
	mes "拡張(モジュールをアドレスで)：不可能"
	
	vector vec
	speed_test "拡張", "vector",         vec(cnt)     = rnd(100),  N/10
	dim vec
	
	vector vec2
	speed_test "拡張", "vector内部変数", vec2(0, cnt) = rnd(100),  N/10
	dim vec2
	
	dim variable
	#define _proc dim variable : repeat 16 : variable(cnt) = rnd(100) : loop
	speed_test "拡張", "標準配列 (max 16)", _proc, N/16
	#undef _proc
	
	vector vec
	#define _proc  repeat 16 : vec(cnt) = rnd(100) : loop
	speed_test "拡張", "vector (max 16)", _proc, N/16
	#undef _proc
	
	mes "ok"
	
	/*
	// 書き込みテスト
	dim variable, N
	start = d3timer()
	repeat N
		variable(cnt) = rnd(100)
	loop
	time = d3timer() - start
	mes "書込(普通の変数)：" + time
	
	newmod module, m_A, N
	start = d3timer()
	repeat N
		set_a_f module, cnt, rnd(100)
	loop
	mes "書込(モジュールへ命令で)："+(d3timer()-start)
	
	get_a_Address module, f
	start = d3timer()
	repeat N
		f(cnt) = rnd(100)
	loop
	mes "書込(モジュールへアドレスで)："+(d3timer()-start)
	
	vector v, N
	start = d3timer()
	repeat N
		v(cnt) = rnd(100)
	loop
	mes "書込(vector)：" + (d3timer() - start)
	
	vector v2
	VectorDim v2(0), vartype("int"), N
	start = d3timer()
	repeat N
		v2(0, cnt) = rnd(100)
	loop
	mes "書込(vector-inner)：" + (d3timer() - start)
	
	// 読み出しテスト
	start = d3timer()
	repeat N
		k = variable(cnt)
	loop
	mes "読出(普通の変数)："+(d3timer()-start)
	
	start = d3timer()
	repeat N
		k = get_a_f(module,cnt)
	loop
	mes "読出(モジュールから関数で)："+(d3timer()-start)
	
	start = d3timer()
	repeat N
		k = f(cnt)
	loop
	mes "読出(モジュールからアドレスで)："+(d3timer()-start)
	
	start = d3timer()
	repeat N
		k = v(cnt)
	loop
	mes "読出(vector)：" + (d3timer() - start)
	
	start = d3timer()
	repeat N
		k = v2(0, cnt)
	loop
	mes "読出(vector-inner)：" + (d3timer() - start)
	
	// 拡張テスト
	dim variable
	start = d3timer()
	repeat N/10
		variable(cnt) = rnd(100)
	loop
	mes "拡張(標準配列)："+(d3timer()-start)
	
	dim module
	newmod module, m_A, 1
	start = d3timer()
	repeat N/10
		set_a_f module, cnt, rnd(100)
	loop
	mes "拡張(モジュールを命令で)："+(d3timer()-start)
	
	mes "拡張(モジュールをアドレスで)：不可能"
	
	vector v
	start = d3timer()
	repeat N/10
		v(cnt) = rnd(100)
	loop
	mes "拡張(vector)：" + (d3timer() - start)
	
	vector v2
	start = d3timer()
	repeat N/10
		v2(0, cnt) = rnd(100)
	loop
	mes "拡張(vector-inner)：" + (d3timer() - start)
	
	stop
