// ex01 : apply 関数

#include "obsidian.as"

// apply( functor f, vector args )
// @ vector を引数列として呼び出しを行う。

// @ すべての引数は参照渡し (内部変数への参照) とする。
// @	var/array で受け取った場合、変更することができる。

// stream caller いらず！

	args = vector( "prograpark", 2, 3.14 )
	mes VectorJoin(args)
	
	// 命令形式
	apply axcmdOf(test), args
//	call  axcmdOf(test), "prograpark", 2, 3.14
	
	// 関数形式
	r = apply( *lbf_test, args )
	
	assert r == 7
	assert args(2) == (args(0) + args(1))
	
	mes VectorJoin(args)
	mes "complete."
	stop
	
// 仮引数あり
#deffunc test str a, int b, double c
	assert a == "prograpark"
	assert b == 2
	assert c == 3.14
	return
	
// 仮引数なし
#deffunc __test var a, var b, var c
*lbf_test
	assert a == "prograpark"
	
	c = a + b
	return 7
	