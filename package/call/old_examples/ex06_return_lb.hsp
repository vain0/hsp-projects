// call.hpi - sample 6

#include "call.as"

// ラベル型を返してみる

// @ 通常の return 命令ではラベルを返却できない。
// @ ラベル型を返すには、call_retval 命令が必須となる。
// @ 高階関数が実装できる (たぶん)。

	randomize
	dim n, 2
		n = rnd(100) + 1, rnd(100) + 1
		
	sOperator = "+", "-", "*", "/", "%"
	
	mes "(左辺) = "+ n(0)
	mes "(右辺) = "+ n(1)
	
	repeat 5
		result = call( call(*LGetOperator, cnt), n(0), n(1) )
		mes strf("%d %s %d = %d", n(0), sOperator(cnt), n(1), result )
	loop
	
	// for test
	assert( call( call(*LGetOperator, 0), n(0), n(1) ) == (n(0) + n(1)) )
	assert( call( call(*LGetOperator, 1), n(0), n(1) ) == (n(0) - n(1)) )
	assert( call( call(*LGetOperator, 2), n(0), n(1) ) == (n(0) * n(1)) )
	assert( call( call(*LGetOperator, 3), n(0), n(1) ) == (n(0) / n(1)) )
	assert( call( call(*LGetOperator, 4), n(0), n(1) ) == (n(0) \ n(1)) )
	
	stop
	
//################################################
//        演算ラベル・モジュール
//################################################
*LGetOperator
	switch ( argv(0) )
		case 0 : call_retval *func_add : swbreak
		case 1 : call_retval *func_sub : swbreak
		case 2 : call_retval *func_mul : swbreak
		case 3 : call_retval *func_div : swbreak
		case 4 : call_retval *func_mod : swbreak
		default
			call_retval *func_any
			swbreak
	swend
	return
	
//------------------------------------------------
// 加減乗除 ++
//------------------------------------------------
*func_add : return argv(0) + argv(1)
*func_sub : return argv(0) - argv(1)
*func_mul : return argv(0) * argv(1)
*func_div : return argv(0) / argv(1)
*func_mod : return argv(0) \ argv(1)

*func_any : return 0

