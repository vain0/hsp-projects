// call.hpi - sample 19

#include "call.as"

// コルーチン(coroutine)
// @ 途中で中断・再開することのできる関数。

// co_create( functor f, args... )
// @	関数 f をコルーチンとして生成する。
// @	functor 型の値が返却される。
// @	f はまだ呼び出されない。

// @ 現在、 f には基本関数子 ( ラベルか、ユーザ定義関数 ) のみ指定できる。

// コルーチンは functor 型なので、通常通り () や call コマンドで呼び出すことができる。
// 引数を受け取ることはできない。
// 最初の呼び出しでは、co_create で与えられた引数をもって、中身の関数が呼ばれる。
// 2回目以降の呼び出しでは、前回 co_yield した場所から実行が再開される。
// 前回の呼び出しで return されていた場合、呼び出すことはできない (エラーとなる)。

// co_yield value
// @	value を返値として、コルーチン呼び出しを中断する。
// @	このコルーチンが次に呼ばれるときは、この次から再開される。

// @ 実質的に return 処理なので、repeat-loop の中で使ってはいけない。
// @ 関数形式で用いるには、ランタイムレベルの対応か、相当の黒魔術が必要なので、実装しない。
// @	( スタックまるごとの保存 )

// co_result()
// @	

// co_exit value
// @	value を返値として、コルーチン呼び出しを終了する。
// @	もう呼び出すことはできない。
// @	通常の return とほぼ同じと考えてよい。

// @ HSPにも予約語 yield, resume があるため、
// @	ランタイムレベルでの対応が期待されている。
// @ ここで実装したのは、いわばなんちゃってコルーチンである。

	// シンプルな使い方
	counter_natural = co_create( axcmdOf(counter), 0, 1 )	// 自然数カウンター
	counter_odd     = co_create( axcmdOf(counter), 1, 2 )	// 奇数カウンター
	
	repeat 10
		n = counter_natural()
		o = counter_odd()
		mes "(n, o) = (" + n + ", " + o + ")"
		
		assert( n == cnt && o == cnt * 2 + 1 )
	loop
	
	stop
	
// [コルーチン] カウンター
#defcfunc counter int init, int step,  local k
	k = init
	while
		co_yield k
		k += step
	wend
;	co_exit

	// 束縛
	/*
	counter_0base = argbind(  defidOf(counter), 0 )		// 束縛関数
	counter_even  = co_create( counter_0base, 2 )		// 偶数カウンター
	
	repeat 10
		mes "(e) = (" + counter_even() + ")"
	loop
	//*/
	