// call.hpi - sample 1

#include "call.as"
#include "call_for_sample.as"		// サンプル用

// いろいろ詰め込みすぎてよくわからないもの

// 命令・関数っぽさを出すことが出来る
#define printf call *false_printf,//			命令は可変長のままにできる
#define ctype factf(%1=0) call(*fact_f, %1)//	引数の数が固定されてしまう

*main
	a = "参照渡ししてみる実験です"
	b = 3.14159265358979323846264338
	
	// 命令形式で呼び出してみる
	call *LFunc, "Hello, world!", byref(a), byref(b)	// 普通は値渡し、byref(var) で参照渡し
	mes "  a = " + a
	mes "  b = " + b
	
	// 関数形式で呼び出してみる( 引数にラベルを直接書き込めません )
	mes "3  * 5  = "+ call( *mul, 3, 5 )
	mes "3! * 5! = "+ call( *mul, factf(3), factf(5) )
	mes "12! * 2 = "+ call( *mul, factf(12), 2 )	// output: 958003200.000000
	
	// 可変長引数の命令で呼び出してみる
	format_str = "%prm%関数と似て、" + call( *strmul, "%prm%個でも", 2 ) + "引数を受け取れます。つまり%prm%です。"
	
	printf format_str, "printf()", 1, 2, "可変長引数"
	printf "普通に出力することも可能です。引数より多い %prm% はそのまま出力されます。"
	
	mes "\n---- テスト終了 ----"
	stop
	
//------------------------------------------------
// テスト用ラベル命令
//------------------------------------------------
*LFunc
	call_aliasAll p1, p2, p3
	
;	OutputArgInfo		// 引数情報を出力する
	OutputArgValue		// 引数を表示する
	
//	p1 = "定数に代入です。絶対にこんなことしちゃいけません！！"
	p2 = "参照渡しで受け取りました"
	p3 = 2.4
	
//	refarg(0) = "定数に代入するテスト。"
;	refarg(1) = "安易に書き込んでみました"
;	refarg(2) = 2.4
	
	return
	
//------------------------------------------------
// かけ算関数
//------------------------------------------------
*mul
;	call_retval argv(0) * argv(1)		// 戻り値を設定する
	return argv(0) * argv(1)
	
//------------------------------------------------
// 偽 printf
// 
// @ %prm% を引数に置換します。
// @ 速度・利便性のことは考えていません
//------------------------------------------------
*false_printf
	sdim sform
	sform = argv(0)
	index = 0
	
	// "%prm%" を、引数ごとに置き換える
	repeat argc - 1							// argc は引数の数
		n = instr( sform, index, "%prm%" )
		if ( n < 0 ) { break }
		
		index += n
		sform  = strmid(sform, 0, index) + argv(cnt + 1) + strmid(sform, index + 5, strlen(sform) - (index + 5))
	loop
	
	mes sform
	
	return
	
//------------------------------------------------
// 階乗を求める関数
// 
// @ 再帰のサンプルなので、再帰を用いる
//------------------------------------------------
*fact_f
	if ( 0 != argv(0) ) {
		return call( thislb, argv(0) - 1 ) * argv(0)	// 再帰呼び出し
	} else {
		return 1.0
	}
	
//------------------------------------------------
// 文字列を反復する関数
// 
// @ 文字列を返すテスト
//------------------------------------------------
*strmul
	call_aliasAll p1, p2
	
	if ( p2 <= 0 ) {
		return ""	// 空文字列を返しておく
	}
	
	sdim s, strlen(p1) * p2 + 1
	repeat p2
		s += p1		// 反復する
	loop
	
	return s
	
// 以降、デバッグ用
#module

//------------------------------------------------
// 引数情報 arginfo を出力する
//------------------------------------------------
#deffunc OutputArgInfo
	mes "############################################"
	repeat ARGINFOID_MAX
		mes "#       arginfo(" + cnt + ", 0) = " + arginfo(cnt, 0)
	loop
	mes "############################################"
	return
	
//------------------------------------------------
// 引数の値 argv を出力する
//------------------------------------------------
#deffunc OutputArgValue
	repeat argc
;		mes " p"+ (cnt + 1) +" = "+ argv(cnt)
		call *false_printf@, " p%prm% = %prm%", cnt + 1, argv(cnt)
	loop
	return
	
#global



#addition "Mo/pvalptr.as"
#ifdef pvalptr
#module

#deffunc OutputLbData var lb
	dupptr pval, pvalptr(lb), 48, 4
	mes "変数 lb の PVal"
	foreach pval
		logmes strf("pval(%2d) : ", cnt) + pval(cnt)
	loop
	mes
	
	dupptr pt, pval(7), 4, 4
	logmes strf(" 内容 : 0x%08X ( pointer to label )", pt)
	return
	
#global
#endif
