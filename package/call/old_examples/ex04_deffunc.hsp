// call.hpi - sample 4

#include "call.as"
#include "call_for_sample.as"		// サンプル用

// #deffunc のエイリアス名を使用する

// @ #deffunc の後にラベルを定義すればよい。
// @	引数タイプは、var, array, local しか使用できない。
// @		array : 配列を受け取る
// @		var   : 変数か、値を受け取る
// @		local : ローカル変数 (cf. ex15)
// @ #deffunc での命令名は使用しないので、何でもいい。

// @ おまけ
// @ call などで呼ばれたラベルはシステム変数 thislb で参照できる。

	call *message, "Hello, world!"
	call *fl_printf, "この命令は%prm%です。円周率は %prm% ではありません %prm% です。", "可変長引数", 3, 3.141592
	call *fl_printf, "5! = 5・4・3・2・1 = %prm%", call(*fact_f, 5)
	stop
	
//------------------------------------------------
// 文字列を画面に表示する
//------------------------------------------------
#deffunc lbf_message var p1		// 命令名はダミー( なんでもOK )
*message
	mes p1
	return
	
//------------------------------------------------
// 書式文字列を出力する
// 
// @ 可変長引数
// @ "%prm%" を引数の順番で置き換える
// @ 速度・利便性はダメダメ
//------------------------------------------------
#deffunc lbf_fl_printf var p1	// local は使用不可
*fl_printf
	sdim sform
	
	sform = p1
	index = 0
	
	repeat argc - 1				// argc は引数の数
		n = instr(sform, index, "%prm%")
		if ( n < 0 ) { break }
		
		index += n
		sform  = strmid(sform, 0, index) + argv(cnt + 1) + strmid(sform, index + 5, strlen(sform) - (index + 5))
	loop
	
	call *message, sform	// ラベル命令の中からラベル命令を呼び出せる
	
	return
	
//------------------------------------------------
// 階乗を計算する
// 
// @ double 型で返す。
//------------------------------------------------
#defcfunc lbf_fact_f var p1
*fact_f
	if ( 0 != p1 ) {
		return call( thislb, (p1 - 1) ) * p1	// 再帰呼び出し
	} else {
		return 1.0
	}
	return
