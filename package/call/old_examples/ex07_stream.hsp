// call.hpi - sample 7

#include "call.as"

// [[ Old ]] ストリーム呼び出しを行う
// @→ ex18_stream_caller 推奨

// @ ストリーム呼び出しとは、引数を1つずつ設定する呼び出し方。

// @ call_stream_begin [*dst 省略可能]
// @	*dst は呼び出し先のラベル。
// @	ストリーム呼び出しの準備を始める。
// @ call_stream_add [...]
// @	準備中のストリーム呼び出しで使う引数を追加する。
// @	何度でも呼び出せる。
// @	呼び出すときの引数の順序は、これで追加したときと同じ。
// @ call_stream
// @	ストリーム呼び出しを実行する。
// @	1度呼び出すと、引数の情報はすべて消去される。

// @merit:
// @	実引数リストを、ループなどで作成できるので、引数の数を実行時に決められる。
// @		ref: 下記サンプル


// @ JavaScript 等の他言語では「配列」を引数リストとして用いることで
// @	動的に引数リストを構築できるが、HSPの配列はそれほど柔軟ではないので、
// @	こういう手段を考えた。

*main
	randomize
	nArg = rnd(7) + 1
	
	call_stream_begin *false_printf		// ラベルは省略可能
;	call_stream_label *false_printf		// 後からラベルを設定・変更できる
	
	call_stream_add  call(*strmul, "%prm%, ", nArg - 1) + "%prm%"
	
	repeat nArg
		call *addarg					// 途中で通常の call を挟んでもかまわない
;		call_stream_add rnd(100)
	loop
	
	mes "output-size: " + call_stream() + " bytes"	// 呼び出し実行
	
	stop
	
*addarg
	call_stream_add rnd(100)
	return
	
//------------------------------------------------
// 偽 printf
// 
// @ %prm% を引数に置換する。
// @ 速度・利便性のことは考えていない。
// 
// @ 返値：出力した文字列の長さ
//------------------------------------------------
*false_printf
	sdim sform
	sform = argv(0)
	index = 0
	
	// "%prm%" を、引数ごとに置き換える
	repeat argc - 1							// argc は引数の数
		n = instr(sform, index, "%prm%")
		if ( n < 0 ) { break }
		
		index += n
		sform  = strmid(sform, 0, index) + argv(cnt + 1) + strmid(sform, index + 5, strlen(sform) - (index + 5))
	loop
	
	mes sform
	
	return strlen(sform)
	
//------------------------------------------------
// 文字列反復
//------------------------------------------------
#defcfunc lbf_strmul var s, var times
*strmul
	if ( times <= 0 ) { return "" }	// 空文字列を返しておく
	
	len = strlen(s)
	sdim stmp, len * times + 1
	
	repeat times
		poke stmp, cnt * len, s		// 反復する
	loop
	
	return stmp
	