// call.hpi - sample 17

#include "call.as"

// 引数束縛(bind)
// 部分適用(partially-application)

// @ 命令・関数の一部の引数に値を代入して、
// @	残りの引数を受け取る命令・関数を得る。
// @	functor 型の値が返却される。
// @	得られた関数を「束縛関数(bound function)」と呼ぶ。

// 不束縛 (nobind)
// @ 束縛しない引数には nobind(n) を指定する。
// @	n: 束縛関数の引数番号 (省略可、() も無くてもよい)

// @ex:
// @	myfunc = function( a, b, c ) { a + b / c }	// 3引数 a, b, c をとる
// @	bound  = argbind( myfunc, "#", nobind(1), nobind(0) )
// @;	bound( x, y ) ⇔ myfunc( "#", y, x )

// 脱束縛 (unbind)
// @ 引数束縛の逆操作
// @	argbind の対象となった元々の関数を返却する。
// @	引数は functor 型しか受け取らない。

#module

// 足し算関数
#defcfunc add int lhs, int rhs
	mes "(lhs, rhs) = (" + lhs + ", " + rhs + ")"
	return lhs + rhs
	
// 引き算関数
#defcfunc sub int lhs, int rhs
	mes "(lhs, rhs) = (" + lhs + ", " + rhs + ")"
	return lhs - rhs
	
// 変な関数
#defcfunc myfunc str prefix, double x, double y
	return prefix + (x / y)
	
#global

;	call_dec *LAdd, "int", "int"
	
	// 束縛
	add3 = argbind( axcmdOf(add), 3 )	//= function( rhs ) { 3 + rhs }
	sub3 = argbind( *LAdd, -3 )			// ラベルでもよい
	mes add3( 10 )
	
	/*
	functor adds, 5
	repeat length(adds)
		adds(cnt) = argbind( defidOf(add), cnt )
		mes "cnt * 2 = " + call( adds(cnt), cnt )
	loop
	//*/
	
	// 不束縛引数(nobind) を利用する
	
	// sub_swap() の第0引数が nobind(0) の位置に、
	//	同じく第1引数が nobind(1) の位置に設定される。
	sub_swap = argbind( axcmdOf(sub), nobind(1), nobind(0) )
	
	mes sub_swap( 7, 3 )	//= sub(3, 7)
	
	// 脱束縛
	fAdd = unbind( add3 )	// add 関数が得られる
	mes fAdd( 1, 2 )
	
	stop
	
#deffunc lbf_add var lhs, var rhs
*LAdd
	mes "(lhs, rhs) = (" + lhs + ", " + rhs + ")"
	return lhs, rhs
