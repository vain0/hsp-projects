// call.hpi - sample 16

#include "call.as"			// (省略可)
#include "call_modcls.as"	// 拡張ヘッダの include が必要

// モジュールクラス
// @ struct 型を乗っ取って混乱させる。
// @ 乗っ取った struct 型を modinst と呼ぶことにする。
// @	区別のため。実際に名前を書き換えているわけではない。
// @ hsp 本来の struct へのあらゆる互換性を持つはず。
// @ 上記のように、call_modcls.as を include した場合のみ機能する。
// @ 新たに型を追加するのではなく乗っ取っているのは、
// @	ユーザ定義関数にはプラグイン拡張型を渡せないため。

// 0. struct を処理する関数が、ほぼすべて call.hpi のものに差し替えられる。

// 1. modinst は強い参照型である。
// @	従来の struct は、変数に代入すると、
// @	代入先が右辺のクローン(弱参照; dup とはまた異なる)になっていた。

// @	modinst 型は参照型、則ちインスタンスへの参照(ポインタ)を値として持つ。
// @	例えば newmod した変数には、インスタンス X への参照が入る。
// @		newmod v, theClass		// X が生成され、v はその参照を得る
// @	これを他の変数に代入すると、その代入先も X への参照を得る。
// @		r = v
// @	ここで、v と r は等価な存在となる。一方が他方への参照、というわけではない。
// @	インスタンスは、それへの参照がすべて消滅したときに自動的に破棄される。
// @	この場合、v, r が共に X への参照を失ったときに、X は破棄される。
// @		v = 0		// 参照を失う
// @		r = 0		// 〃。このとき X が解体される。#modterm が呼ばれる。
// @	なお、delmod は参照の除去である。インスタンスの強制的な解体ではない。
// @		delmod v

// @	2つの参照が参照として等価か否かを調べるには、関数 modcls_identify を用いる。
// @		modinst_identify( v, r )	//=> true

// 2. 演算関数を登録できる。
// @	modinst 型同士の演算を、ユーザ定義命令で記述することができる。
// @	( ただし、両者は同じクラスでなければならない )
// @	演算関数は破壊的なものを登録する。例えば、+ を定義するには、
// @	+= の処理を書けばよい。非破壊的な演算(a + b など)を行うには、
// @	左辺の複製に、対応する破壊的な処理をして返却すればよいため。
// @		a + b := { a2 = dupmod_of(a) : a2 += b : return a2 }
// @	そのため、「複製」(duplicate)を行う関数を登録する必要がある。

// @	また、str, double, int への型変換を処理させることができる。

// 3. nullmod が値として使用できる。
// @	「無効な参照」であることを明示する値を、システム変数 nullmod が返却する。
// @	例えば x = nullmod と書くと、x は元々持っていた値を失い、
// @	無効な参照を得る。x が modinst 型ならば、これは delmod x に等しい。
// @	参照が nullmod であるか否かを調べるには、modinst_identify か、
// @	またはそれ専用の is_nullmod を用いる。
// @		isNullmod( r ) := modinst_identify( r, nullmod )
// @	nullmod の挙動に関しては ex21_nullmod も参照。

// サンプルクラス
// 値 value を持つ。name, bDup は分かりやすくするため。
#module Test value, name, bDup

#modinit int _value, str _name, int _bDup
	bDup = _bDup
	name = _name
	test_set thismod, _value
	
	mes "new >> " + name + ": " + value + " $" + bDup
	return
	
#modterm
	mes "del << " +  name + ": " + value + " $" + bDup
	wait 60
	return
	
#modfunc test_set int x
	value = x
	return
	
#modcfunc test_get
	return value
	
#modcfunc test_getName
	return name
	
// 複製関数
// @ 入力変数 x を thismod の複製にする。
// @ つまり、同じ値を持つ ( == が成り立つ ) ようなインスタンスを新たに作ればよい。
#modfunc test_dup_fact var x
	newmod x, Test, value, name + "'", true
	return
	
// 演算関数(+)
// @ thismod を、それと入力変数を演算して得られる値にする
// @ 複製関数が必須。
#modfunc test_add var x
	mes strf("add: %d(%s) + %d(%s)", value, name, test_get(x), test_getName(x))
	value += test_get(x)
	return
	
#modfunc test_mul var x
	mes strf("mul: %d(%s) * %d(%s)", value, name, test_get(x), test_getName(x))
	value *= test_get(x)
	return
	
// 比較関数
// thismod と x の大小を調べて、対応する整数値(int)を返却する。
// 0. thismod == x → 0
// 1. thismod <  x → 負
// 2. thismod >  x → 正
// opId は、実際に比較に使われる演算子の opId 。opId_Lt(<) など。
#modcfunc test_cmp var x, int opId
	mes strf("cmp: %d(%s) <> %d(%s)", value, name, test_get(x), test_getName(x))
	return value - test_get(x)
	
// 型変換関数
#modcfunc test_toInt int flag
	return int(value)
	
#modcfunc test_toStr int flag
	return str(value)
	
#modcfunc test_toDouble int flag
	return double(value)
	
// メソッド分散関数
#modfunc test_method str method
	switch ( method )
		case "print": return defidOf( test_method_print )
		case "times": call_return *test_method_times
	swend
	return 0
	
#modfunc test_method_print
	mes name + " = " + value
	return
	
#modfunc test_method_times__ int n, var proc
*test_method_times
	assert( vartype(proc) == functor || vartype(proc) == vartype("label") || vartype(proc) == vartype("int") )
	repeat n
		call proc, byref thismod
	loop
	return
	
// 登録
#deffunc test_init
	modcls_register Test, OpId_Add, test_add		// +
	modcls_register Test, OpId_Mul, test_mul		// *
	
	modcls_register Test, OpId_Dup, test_dup_fact	// 複製関数
	modcls_register Test, OpId_Cmp, test_cmp		// 比較関数
	
	modcls_register Test, OpId_ToStr,    test_toStr		// str()
	modcls_register Test, OpId_ToDouble, test_toDouble	// double()
	modcls_register Test, OpId_ToInt,    test_toInt		// int()
	
	modcls_register Test, OpId_Method, test_method	// メソッド分散関数
	
	call_dec *test_method_times, PRM_TYPE_MODVAR, "int", "any";, "local"		// cf. ex10, ex11
	return
	
#global
	test_init
	
	// サンプル
	newmod a, Test, 1, "a"
	b = newmod(Test, 2, "b")	// 関数形式でも記述できる
;	b = modnew Test(2, "b")		// 非推奨
	
	// 複製 (c を a の複製にする処理)
;	test_dup a, c		// 非推奨
;	dupmod a, c
	c = dupmod(a)
	
	// 型変換
	mes "a = " + a
	
	// 演算
	b += a				// 加算 (破壊)
	x = (b + a) * b		// 加算 (非破壊)
	mes "(b + a) * b = " + x
	
	mes "a <  b #=> " + (a <  b)		// 比較
	mes "a == c #=> " + (a == c)
	
	// 同一性
	r = a				// 同一参照
	mes "a === r : " + modinst_identify(a, r)
	mes "a === c : " + modinst_identify(a, c)
	
	// 名前
	mes "Test.modcls = " + modcls_name( Test )
	mes "(a).modcls  = " + modinst_clsname( a )
	
	// メソッド
	a->"print"
	a->"times" 2, functor(*@f) : if (0) : *@ {
		mes "[times: " + cnt + "] " + test_get(a)
		return
	}
	
	stop
	