// call.hpi - sample 12

#include "call.as"

// functor 型を使ってみる

// @ functor 型
// @	call 命令の「呼び出し先」となるものを保持できる型。
// @		後に追加した特殊関数子(「束縛関数」(ex17)など)を保持するのにも使用する。
// @	"call" メソッドで命令形式の、添字で関数形式の、call 呼び出しができる。
// @	配列にすることもできるが、一次元限定で、二次元以上にはできない。
// @	また、配列にした場合、添字を用いた呼び出しができない。
// @	当然 call 命令・関数を用いて呼び出すことができる。

// @ functor 命令
// @	変数の初期化 ( ほとんど意味なし )

// @ functor 関数
// @	他の型を functor 型に型変換する。
// @	label, defidOf() の値にのみ対応。

// @ functor システム変数
// @	functor 型の型タイプ値を返す。

// [補足]
// @ "call" メソッドの呼び出し方
// @	2通りの方法がある。どちらでも良いが、配列なら -> は使えない。
// @	1. m->"call" args...
// @	2. mcall m, "call", args...
// @ 単体 or 配列
// @	length() の値が 1 なら単体、1 より大きければ配列、と判定する。
// @ バグ
// @	functor が影響を受ける、HSPのバグが存在するので、最後にある lbf_nocall_test 参照。

	printf  = functor(*lb_printf)		// 呼び出し先ラベルの設定
	mul     = functor(*lb_mul)
	
	functor operate(4)					// functor 配列 (要素数 4)
	operate(0) = *lb_add, *lb_sub, mul, *lb_div		// label → functor に自動変換される
	
	randomize
	lhs = rnd(100)			// [0, 100)
	rhs = rnd(99) + 1		// [1, 100)
	
	// 命令形式 => "call" メソッドを使う
	sFormat = "%prm%の%prm%が%prm%%prm%だけでなく、\n%prm%型(%prm%)の変数でもできるようになりました！"
	printf->"call" sFormat, "ラベル命令", "呼び出し", "call", "命令", "functor", functor
	
	call printf, "%prm% の %prm% にもできます。", "call", "呼び出し先"
	
	// 関数形式 (単体) => 添字を引数として呼び出す
	printf->"call" "%prm% %prm% %prm% = %prm%", lhs, "*", rhs, mul( lhs, rhs )
	
	// 関数形式 (配列) => functor の値を返す
	repeat length(operate)
		printf->"call" "operate[%prm%](%prm%, %prm%) = %prm%", cnt, lhs, rhs, call( operate(cnt), lhs, rhs )
	loop
	
	lbf_nocall_test printf
	
	stop
	
//------------------------------------------------
// 偽 printf
// 
// @ %prm% を引数に置換します。
// @ 速度・利便性のことは考えていません
//------------------------------------------------
*lb_printf
	sdim sform
	sform = argv(0)
	index = 0
	
	// "%prm%" を、引数ごとに置き換える
	repeat argc - 1							// argc は引数の数
		n = instr(sform, index, "%prm%")
		if ( n < 0 ) { break }
		
		index += n
		sform  = strmid(sform, 0, index) + argv(cnt + 1) + strmid(sform, index + 5, strlen(sform) - (index + 5))
	loop
	
	mes sform
	
	return
	
//------------------------------------------------
// 四則演算
//------------------------------------------------
*lb_add
	return argv(0) + argv(1)
	
*lb_sub
	return argv(0) - argv(1)
	
*lb_mul
	return argv(0) * argv(1)
	
*lb_div
	return argv(0) / argv(1)
	
//------------------------------------------------
// バグについて
// 
// @ array / local 引数エイリアスが連想配列型(functor含む)である場合、
// @	それを添字なしで右辺値として用いると、システムエラーが起きる
// @	というバグがある。
// @ var エイリアスの場合は問題ないが、それは仕様上、添字をつけられないので注意。
//------------------------------------------------
#deffunc lbf_nocall_test array f
	
;	x = f			// システムエラー
;	x = f()			// 引数なしで関数呼び出しをし、その返値が返る; やりたいのはそうではない
	x = f( nocall )	// ok. f の値が x に代入されるし、呼び出しも生じない
	
	assert x == f(call_nocall)
	
;	f = 0			// ok. 左辺値として用いるのは構わない
	f->"call" "ok"	// ok. メソッドの this は左辺値
	
	return
