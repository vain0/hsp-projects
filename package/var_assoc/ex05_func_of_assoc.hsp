// ex05 : assoc 型の関数

#include "var_assoc.as"

// assoc 型の値を返却する関数の定義
// assoc 型の値を受け取る引数の定義

#module

// 1. assoc 型の値を返す関数の定義例

// マクロを定義しておくと使いやすいかもしれない
#define global Point AssocExpr.Point_

#defcfunc Point_ int x, int y,  local self
	assoc self
	self("x") = x
	self("y") = y
	
	// 返値を AssocResult() 関数に通しつつ return する
	// なおHSPのバグにより、「self」とだけ書くと落ちるので、添字をつける必要がある
	return AssocResult( self(AssocIndexFullslice) )
	
// 2. assoc 型の値を受け取る関数の定義例

// assoc型の値を受け取るには array 引数を使用する。
// var でも一応動くが、添字 (...) をつけることができない。
#defcfunc Point_toString array self
	return strf( "(%d, %d)", self("x"), self("y") )
	
#global

	// 使用例
	pt = Point( 10, 20 )
	mes Point_toString( pt )
	
	assert (vartype(pt) == assoc)
	
	stop
	
//**********************************************************
//        おまけ
//**********************************************************

	// マクロを使わずに書く
	pt = AssocExpr( Point_(2, 7) )
	
	// もっとシンプルな形
	assoc a
	x = AssocExpr( AssocResult(a) )
	// これは x = a に等しい
	
	// AssocResult(a)
	// assoc 型の値 a を受け取り、プラグインの中に保存する関数。
	// 関数としては、適当な整数値を返す。
	
	// AssocExpr(n)
	// 1つの引数 n を受け取るが、それは無視する。
	// AssocResult() によって最後に保存された assoc 型の値を返す。
	// なお、バグ検知のため、n が AssocResult() が返した値じゃなかったらエラーになる。
	
	// ユーザ定義関数 (#defcfunc) は str, double, int 型の値しか返せないので、
	// こういう小細工が必要になる。
