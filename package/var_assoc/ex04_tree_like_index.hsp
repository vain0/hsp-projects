// ex04: ツリー風添字指定

#include "var_assoc.as"

// assoc 型をノードとして、ツリー風の処理が可能

// @ サンプルとして、「どう書く？.org」の次の問題を解く。
// @ 問題文は以下にブロックコメントで引用。
// @ref: 階層的なキーの連想配列化 [ http://ja.doukaku.org/293/ ]

/*

住所のように任意の深さの階層性をなすキーとそれに対応したオブジェクトを

['東京都', '区部', '千代田区', object1]

のように配列で表すとします。このような配列からなる配列

[['東京都', '区部', '千代田区', object1],
['東京都', '区部', '中央区', object2],
['東京都', '区部', '港区', object3],
[東京都', '多摩地域', '支部', '昭島市', object4],
['東京都', '多摩地域', '支部', 'あきる野市', object5],
['東京都', '多摩地域', '西多摩郡', '奥多摩町', object6],
['東京都', '島嶼部', '大島支庁', '大島町', object7],
['東京都', '島嶼部', '三宅支庁', '三宅村', object8]]

を階層的な連想配列に変換して下さい。可能なら、各連想配列をキーにしたがって並べてください。
もっとよいデータがあれば、それを使ってください。

//*/

/*
[解答]
tree:
	東京都:
		区部:
			港区 = object2
			千代田区 = object0
			中央区 = object1
		多摩地域:
			支部:
				あきる野市 = object4
				昭島市 = object3
			西多摩郡:
				奥多摩町 = object5
		島嶼部:
			三宅支庁:
				三宅村 = object7
			大島支庁:
				大島町 = object6
//*/

	gosub *LSetGivenData		// 与えられたデータを変数に格納する
	
	// 連想配列化
	assoc tree
	repeat length2(list)		// 各々の配列について
		node = tree
		
		for idx, 0, length(list)
			key = list(idx, cnt)
			
			// 配列の次のデータが "" なら、現在の要素をリーフとする
			if ( idx + 1 != length(list) ) { if ( list(idx + 1, cnt) == "" ) { _break } }
			
			// リーフでなければ、次のノードを確保する
			if ( AssocVartype( node(key) ) != assoc ) {
				AssocDim node(key), assoc		// 内部ツリーを assoc 型にする
			;⇔	assoc x : node(key) = x			// ("⇔": こう書いてもよい、ということ)
			}
			
			node = node(key)
		next
		
		// リーフノードに値を設定する
		node(key) = values(cnt)
		
	loop
	
	// いくつか出力する
	mes {"["東京都", "多摩地域", "支部", "昭島市"] → "} + tree("東京都", "多摩地域", "支部", "昭島市")
	
	stop
	
*LSetGivenData
	sdim list, , 5, 8
		list(0, 0) = "東京都", "区部", "千代田区", ""
		list(0, 1) = "東京都", "区部", "中央区", ""
		list(0, 2) = "東京都", "区部", "港区", ""
		list(0, 3) = "東京都", "多摩地域", "支部", "昭島市"
		list(0, 4) = "東京都", "多摩地域", "支部", "あきる野市"
		list(0, 5) = "東京都", "多摩地域", "西多摩郡", "奥多摩町"
		list(0, 6) = "東京都", "島嶼部", "大島支庁", "大島町"
		list(0, 7) = "東京都", "島嶼部", "三宅支庁", "三宅村"
		
	sdim values, , 8
		repeat length(values) : values(cnt) = "object" + (cnt + 1) : loop
	
	return
