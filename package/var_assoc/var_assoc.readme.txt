
	var_assoc (version 1.01)

【　名　称　】var_assoc
【　種　別　】HSP3拡張プラグイン
【　作　者　】上大
【 取り扱い 】フリーソフトウェア
【 開発環境 】Windows XP HomeEdition SP3
【 動作確認 】Windows XP
【 サポート 】http://prograpark.ninja-web.net/

＠目次
　・概要
　・展開
　・削除
　・パッケージ
　・機能
　・ソースコード
　・著作権
　・参照

＠概要
	「連想配列」や「オブジェクト」などと呼ばれるデータ構造を提供する、
	HSP3専用の拡張プラグインです。
	
	詳しい使用方法は、「＠機能」を参照してください。
	
＠展開
	ダウンロードした圧縮ファイルを適当なところに解凍してください。
	他に特別な手続きは必要ありません。
	
＠削除
	本ソフトウェアが不要になった場合は、
	関係のあるファイルやフォルダを削除してください。
	「＠パッケージ」参照。
	
＠パッケージ
　　[var_assoc]
　　　　┣ [src]　　　　 …… Ｃ＋＋ソースコード
　　　　┣ var_assoc.as　…… 専用ヘッダ。
　　　　┣ readme.txt　　…… このファイル。取扱説明書。
　　　　┗ var_assoc.hpi …… 実行ファイル
	
＠機能
・準備
	ランタイム( 通常はhsp3.exe )とhspcmp.dllがあるフォルダに
	var_assoc.hpiを、hsphelp フォルダに var_assoc.hs を、
	それぞれコピーしてください。
	
・使用法
	同梱されている var_assoc.as を、スクリプトの最初の方で
	#include してください。
	
		#include "var_assoc.as"
	
	assoc型変数を作成するには、assoc命令を使用します。使い方は
	dim命令とほぼ同様です。
	
		assoc m1		// assoc 型の変数
		assoc m2, 5		// 要素5つの配列
	
	assocは、内部に複数の変数を持っています。それら一つ一つに、
	"キー"と呼ぶ文字列が割り当てられているので、その文字列を
	( ) に配列要素のように指定して、要素を指定します。
	
		assoc m
		m("キー") = 3	// 代入する
	
	識別子には文字列や空白も使用可能です。長さには特別な制限を
	設けていません。キーの追加は、参照と同時に行われます。
	なお、大文字と小文字は区別されるので注意してください。
	
		// m("a"), m("A"), m("Ａ") はどれも別の変数
	
	assoc型変数を配列にすることも可能です。配列要素は、キーの
	前に指定します。
	
		assoc m, 3	// 要素3つ
		m(1, "r") = 90	// m("r", 1) では意味が異なる
	
	assocの内部変数( assoc型変数が管理している変数 )も、変数なので
	当然配列にすることが可能です。添字は、キーの後に指定します。
	
		assoc m
		AssocDim m("r"), vartype("int"), 3
		m("r", 2) = 90147
	
	内部変数を配列にするには、dimではなくAssocDim命令を使用してくだ
	さい。
	
	また、poke のように、引数として変数を渡さなければいけない
	命令に内部変数を渡したい場合は、AssocRef 関数を使用します。
	
		assoc m
		m("str") = "pragrapark nin-nin"
		poke AssocRef(m("str")), 2, 'o'	// 誤字を訂正
		mes m("str")
	
	同じ内容に何度も連続で参照したい場合は、いちいち要素を書くのでは
	なく、括弧内を空にして参照することが出来ます。これを、無更新参照
	と呼びます。
	
		assoc m
		m("url") = "http://prograprk.ninja-web.net/"
		mes m()			// <=> mes m("url")
	
	なお、dup 命令でクローンを作っても正常に動かないのでご注意ください。
	@ PVal::master を用いる型の常
	
＠ソースコード
	[src]フォルダの内部のファイルすべてです。不要な場合は、フォルダ
	ごと削除してもかまいません。
	
	Visual C++ 2010 Express Edition を使用しています。
	バグや間違いを見つけたら、報告していただけると非常にありがたいです。
	( 「＠参照」を参照 )
	
	ソリューション var_assoc のフィルタ hsphdk は、ファイルのパスが
	おかしい可能性が高いので、hspsdk フォルダのファイルに入れ替えて
	ください。
	
＠著作権
	※hspsdkの中のモノは、OpenHSPのライセンスに従ってください。
	　英語ですが……。
	
	著作権は作者である上大が持っています。プログラムは無断で転用・
	改変してもかまいません。hpi単体の場合、二次配布も許可します。
	
＠参照
	・プログラ広場
	　意見や感想、バグ報告、最新版のダウンロードなどはここで。
	　http://prograpark.ninja-web.net/
	
	・HSPTV! ( HSP本家サイト )
	　http://hsp.tv/
	
	・HSP開発wiki ( C++でのプラグイン作成講座がある )
	　http://hspdev-wiki.net/
	　→ ::SideMenu::TOPICS::プラグイン::その他::プラグイン作成ガイド
	
＠更新履歴
	assoc("", "aaa") ← prototype 扱い
	array 引数に渡すことを考えると assoc は配列にできない方がいい？

2014.09.13 (Sat)
	・多数のコマンドが「パラメータの値が異常です」(HSPERR_ILLEGAL_FUCNTION)のつもりで
		HSPERR_INVALID_PARAMETER を投げていたバグを修正した。

2014.09.11 (Thu)
	・AssocIndexFullslice に対応した。
		as(AssocIndexFullslice) と書くことで、a と書くのと同じ添字になる。あまり意味はない。

2014.09.08 (Mon)
	・knowbug の拡張型表示に対応した。
		assoc_k.addValue="_knowbug_addValueAssoc@12"
		ただし、今まで通り、knowbug 側で assoc 型のデータを文字列化することもできる。

2012.09.25 (Tue)

2012.09.24 (Mon)
	・ユーザ定義関数から assoc を返却する機構 AssocResult, AssocExpr を、コマンドで実装した。
		@ 媒介のための変数も、プラグイン内部に置くようにした。
		@ これにより、変数でなくても返却できるようになった。
	・AssocClone の引数を ( dst, assoc(_) ) から ( assoc(_), dst ) に交換した。
	・AssocClone を関数形式で使えるようにした。返値は 0 。
		AssocRef のため。
	
2012.09.22 (Sat)
	・添字を参照する度に内部変数を新規作成してしまうというバグを修正した。
		@ これはひどい。
	・右辺値として添字付き参照したとき、添字が要素数を超えていたら、自動拡張をせず、エラーを出すようにした。
		@ ものぐさ実装をやめた (template で対処できると分かったので)。
		@ var_vector でも同様の処理をした。
	・内部変数が assoc でない連想配列でも正しく動くようにした。
		@ 右辺値として参照するときも、標準配列・連想配列の両方に対応するように作った
		@	code_expand_index_impl_rhs を使うようにした。
		@ var_vector でも同様の処理をした。
		
2011.12.25 (Sun)
	・AssocRemove で除去した要素が解放されないバグを修正した。
		@ 要素の解放処理を呼んでいなかった。
		@	また、内部変数が assoc 製であることを示すフラグ(HSPVAR_SUPPORT_USER_ELEM)が、代入等による再確保で消滅していた。
		@	→ 代入や AssocDim 等の、内部変数を再確保する可能性のある処理の前後で、同フラグを保存するようにした。
		@	→ そもそも support userflag の使い方を間違えている (拡張型の変数自体に立てるもの); 要修正。
		@		( 例えば、opex の swap を内部変数に適用するとメモリリークが起きる )
	・AssocChain, AssocCopy, AssocDup を追加した。
	・リリース (ver: 1.01)
	
2011.07.28 (Thu)
	・var_assoc に改名。
	
2011.07.24 (Sun)
	・リリース (ver: 1.0)
	
2011.07.23 (Sat)
	・MultiInsert, MultiRemove, MultiSize を追加した。
	
2011.07.18 (Mon)
	・multi の連続代入、内部変数への連続代入に対応した。
		@ エミュレータを実装しただけ。
	・MultiExists 関数、MultiForeach マクロを追加した。
	
2011.07.16 (Sat)
	・multi 自体への代入で、右辺が multi でないときに配列型不一致エラーを出していなかったバグを修正。
		@ex: the_multi(1) = another_multi
	・ArrayObjectRead() で、multi の内部変数にアクセスするとき、その内部変数も multi 型である場合、
		実体ポインタを得るのに、内部変数に対して GetPtr() ではなく ArrayRead() の処理を適用するようにした。
		@ex: (長いのでインデント崩壊)			// ex04 も参照
	--------------------------
	前提：
		root("key-node")  = node				// 変数 root, node は実体を持つ multi 型とする
		node("key-value") = "value"
	実行する文：
		x = root( "key-node", "key-value" )		//=> x に "value" が代入される
	詳細：
		ArrayObject() で、root("key-node")  を解釈して、内部変数 (node に等しい) へのアクセスが設定される。
		ArrayObject() で、node("key-value") を解釈して、内部変数 (文字列型) へのアクセスが設定される。
		次に、ArrayObjectRead() で、root [access->key = "key-node"] から、内部変数 (= node) にアクセスできる。
		
		さて、ArrayObjectRead() は、変数[添字]が示す実体ポインタを要求する。
		従来なら GetPtr() により内部変数(今はnode)の実体ポインタを取得するところである。
		しかし、今は内部変数(= node)が multi 型なので、特別に、
		「node の実体ポインタを得るのにも ArrayObjectRead() を使用する」。
		とすると、従来で得られるのは node への参照値 (multi型) で、修正後に得られるのは node("key-value") が
		示す実体ポインタ (つまり node が持つ、"value" を持つ内部変数の実体ポインタ) となる。
		
		したがって、「multi の内部変数が持つ multi」の内部変数から実体の値を取り出すことが可能となる。
	--------------------------
	・multi() 関数で、空の multi オブジェクトを式中生成出来るようにした。
		@ 式中オブジェクトは参照カウンタが 0 の状態で生成される。テンポラリ変数がその所有権を持つ。
	・演算子 ==, != で参照同値性を比較できるようにした。
	・MultiExpr() を追加した。
	
2011.06.23 (Thu)
	・multi(null) を他の変数に代入しようとしたとき、ぬるぽが起きていたバグを修正した。
	・multi 命令での multi オブジェクトの構築では、全要素が実体化した状態で生成されるようにした。
	・システム変数 MultiNull を追加した。multi 型の null 値を返す。
	・mpval(multi) も参照カウンタを操作するようにした。
		@ 動作上問題ないことが確認できたため。
	
2011.06.21 (Tue)
	・multi 型を参照型にした。
		代入時に、複製ではなく参照の共有が行われる。
	・knowbug のために、HspVarProc::user から StMultiMapList を生成できるようにした。
	
2011.06.20 (Wed)
	・ちゃんと動くようにした。
	・無更新参照の仕様を変更した。
		@ ( MULTI_NOREF ) ではなく () 。
	・実体型を MultiData を CMulti* に変更した。
	・MultiDel 命令を追加した。
	
2008.12.16 (Tue)
	・ほぼ移植完了。HashData操作系の命令・関数は削除。
	・無更新参照( MULTI_NOREF )の機能を追加。MultiRef()を実装。
	・MultiVarinfo()を追加。
	・プログラ広場で公開。ver.1.00β。
	・readme.txtを一部修正。
	　* 更新履歴を追加。
	　* URLミスを訂正。( http:/hsp.tv/ → http://hsp.tv/ )
	　* URL追加。( HSP開発wiki )
	
2008 12/15 (Mon)
	・var_hash からの移植を開始。
	
// uedai 2008-2012.