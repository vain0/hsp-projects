// ex01 : 要素移動

#include "var_vector.as"

// 要素を移動させる各種命令
// @ 内部変数の添字(位置)が変わるだけで、値のコピーやアドレスの移動などは行われない。

// @ 関数形式の場合、スライスが返却される。
// @	つまり、VectorMove(v, ...) ⇔ { r = VectorSlice(v); VectorMove r, ...; return r; }()

// @ 要素番号が x である要素を [x] と表す。
// @ 前から順に、値が a, b, c, ... である配列(vector)を [a, b, c, ...] と表す。

// VectorMove( self, iDst, iSrc )
// @ [iSrc] を [iDst] に移動する。

// VectorSwap( self, idx1, idx2 )
// @ [idx1] と [idx2] を交換する。

// VectorRotate( self, step = 1 )
// @ 各要素を step 個だけ前方にずらす。先頭の要素は末尾にくる。
// @ 結果、[step] が先頭の状態になる。
// @ex: [0, 1, 2, 3] を Rotate( 1) すると [1, 2, 3, 0] になる。
// @ex: [0, 1, 2, 3] を Rotate(-2) すると [2, 3, 0, 1] になる。

// VectorReverse( self, iBgn = 0, iEnd = last )
// @ 区間 [iBgn, iEnd) を逆順に並べる。
// @ex: [0, 1, 2, 3] を Reverse(    ) すると [3, 2, 1, 0] になる。
// @ex: [0, 1, 2, 3] を Reverse(1, 3) すると [0, 2, 1, 3] になる (区間 [1, 3) が反転)。

// @ ↑サンプルが適当すぎるので詳しい説明を書いた。

	mes ">> init..."
	v = vector( 0, 4, 2, 1, 3, 5 )
	mes "v = " + vec_toString( v )
	
	// move
	mes ">> move: [4] <- [1]"
	VectorMove v, 4, 1
	mes "v = " + vec_toString(v)
	
	// swap
	mes ">> swap: [1] <-> [2]"
	VectorSwap v, 1, 2
	mes "v = " + vec_toString(v)
	
	// rotate
	mes ">> rotate 1"
	VectorRotate v
	mes "v = " + vec_toString(v)
	
	// reverse
	mes ">> reverse"
	VectorReverse v
	mes "v = " + vec_toString(v)
	
	stop
	
	v_r = VectorReverse( v )		// 
	v_r(1) = "Hello, world!"		// 
	
	v_r2 = VectorReverse( v, 1, 5 )	// 区間 [1, 5) を反転
	
	
