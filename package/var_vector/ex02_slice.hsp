#include "var_vector.as"

// vector のスライス

// [a, b)
// 「a 以上、b 未満」という範囲を表す。半開区間。

// 関数：VectorSlice(vec, iBgn, iEnd)
// vec の、添字が iBgn 以上、iEnd 未満である要素からなる vector を得る。
// これも「同じ変数」を持つ「新しい値」である。

	v = vector(0, 1, 2, 3, 4, 5, 6)
	u = VectorSlice(v, 2, 5)
;	u = vector(  v(2), v(3), v(4)  )
	
	repeat 3
		mes strf("u(%d) = %d", cnt, u(cnt))
	loop
	mes
	
// 「同じ変数」を持つことを確認する。

	v(2) = "v[two]"
	mes "u(0) = " + u(0)
	mes
	assert(u(0) == v(2) && u(2) == v(4))
	
// iBgn, iEnd はどちらも省略できる。
// その場合、iBgn は 0、iEnd は vector の長さになる。
// 両方省略したら、vector 全体からなるスライスになる。

	v4_ = VectorSlice(v, 4)		// (4) からのスライス
	v_3 = VectorSlice(v, , 3)	// (3) 以前までのスライス
	
	mes "v4_ = vector(" + v4_(0) + ", " + v4_(1) + ", " + v4_(2) + ")"
	mes "v_3 = vector(" + v_3(0) + ", " + v_3(1) + ", " + v_3(2) + ")"
	mes
	
	repeat 3
		assert (v4_(cnt) == 4 + cnt)
		assert (v_3(cnt) == cnt || (cnt == 2 && v_3(cnt) == "v[two]"))
	loop
	
// 実のところ、代入の際には内部的にスライスを作っている。
;	w = u
;	w = VectorSlice(u)

// このように「同じ変数の列を持つ」「新しい値」のことを、
// 元の vector のスライスと呼ぶ。

	mes "u は、v の [2, 5) スライスである、といっていい。"
	mes
	
// おまけ
// 関数：VectorSliceOut(vec, iBgn, iEnd)
// vec のうち、VectorSlice(vec, iBgn, iEnd) “以外の”部分からなるスライスを得る。
// 使い道不明。

	v_15_ = VectorSliceOut(v, 1, 5)
	mes "v_15_ = vector(" + v_15_(0) + ", " + v_15_(1) + ", " + v_15_(2) + ")"
	
	assert(v_15_(0) == 0 && v_15_(1) == 5)
	
	mes "以上"
	stop