// AutoLauncher

#define global app_name "AutoLauncher"

#packopt name app_name
#packopt hide    1
#packopt orgpath 1

#include "Mo/GetOwnpath.as"		// 実行ファイルのパスを取得する
#include "Mo/MCIni.as"
#include "Mo/MenuBarAPI.as"
#include "Mo/Trayicon.as"
#include "Mo/refEnvar.as"

#uselib "user32.dll"
#func   SetForegroundWindow "SetForegroundWindow" int
#func   PostMessage         "PostMessageA"        int,int,int,sptr
#func   SetTimer            "SetTimer"            int,int,int,nullptr
#func   KillTimer           "KillTimer"           int,int
#func   SetWindowLong       "SetWindowLongA"      int,int,int
#cfunc  GetWindowLong       "GetWindowLongA"      int,int

#module

#defcfunc RemoveQuotes str src_,  local src, local len
	src = src_
	if ( peek(src) == '"' ) {
		len = strlen(src)
		if ( peek(src, len - 1) == '"' ) {
			src = strmid(src, 1, len - 2)
		}
	}
	return src
	
#global

#ifndef __UserDefHeader__
 #define ctype BITOFF(%1 = 0, %2 = 0) ( (%1) & (0xFFFFFFFF ^ (%2)) )
 #define MAX_PATH 260
 #define true  1
 #define false 0
#endif

#define MAX_CMD 60

#enum IDW_PASSWORD = 0
#enum IDW_EXIT
#enum IDW_MAX

*LMain
	gsel 0, -1
	
	sdim ownpath, MAX_PATH
		 ownpath = GetOwnpath("C:/Tool/" + app_name)
	
	ini_new ini, ownpath + "/" + app_name + ".ini"
	
	gosub *LSettingScreen	
	gosub *LLoadSetting
	gosub *LLoadFiles
	gosub *LSettingMenu
	
	if ( cntItems == 0 ) { end }
	
	if ( bPass == false ) {
		gsel IDW_PASSWORD, 1
		onkey gosub *LKey
		do
			await 200
		until ( bPass )
		onkey false
		gsel IDW_PASSWORD, -1
		gsel 0, 0
	}
	
	// タスクトレイに格納
	CreateTrayIcon app_name + "\nWaiting..."
	
	// 時間を空ける
	timerID = 1
	SetTimer hwnd, timerID, lag * 1000
	timerID = stat
	
	oncmd  gosub *LOnTimer, 0x0113 // WM_TIMER
	onexit gosub *LExit
	stop
	
*LOnTimer
	if ( wparam != timerID ) { return }
	gosub *LFreeTimer
	
	DestroyTrayIcon
	
	gosub *LExecFiles
	if ( last ) {
		gsel IDW_EXIT, 1
		await (1000 * last)
		gsel IDW_EXIT, -1
	}
	PostMessage hwnd, 0x0010, 0, 0
	return
	
*LExit
	if ( hmenu ) { DestroyMenu hmenu }
	gosub *LFreeTimer
	end : end
	
*LFreeTimer
	if ( timerID ) { KillTimer hwnd, timerID : timerID = 0 }
	return
	
*LSettingScreen
	sdim in_password, 64
	
	screen IDW_PASSWORD, 180, 80, (2 | 16), (ginfo(20) - 200) /2, (ginfo(21) - 80) /2
	SetWindowLong hwnd, -16, BITOFF( GetWindowLong(hwnd, -16), 0x00080000 )
	title app_name + " - password"
	syscolor 15 : boxf : color
	sysfont 17  : objsize 60, 20 
	pos  10,  5 : mes "パスワードを入力してください"
	pos  10, 20 : input in_password, 150, 20, 24
	            : sendmsg objinfo(stat, 2), 0x00CC, '*', 0 // EM_SETPASSWORDCHAR (パスワード化)
	pos  30, 50 : button gosub "OK",     *LCheckPass
	pos 100, 50 : button gosub "ignore", *LIgnorePass
	
	screen IDW_EXIT, 200, 80, (2 | 16), (ginfo(20) - 200) / 2, (ginfo(21) - 80) / 2
	title app_name
	syscolor 15 : boxf : color
	pos  30, 20 : mes "正常に終了しました"
	pos  60, 50 : button "閉じる", *LExit
	
	return
	
*LCheckPass
	if ( in_password == password ) {
		bPass = true
		
	} else {
		cntPassWrong ++
		// 5回失敗したらシャットダウン
		if ( cntPassWrong >= 5 ) {
			exec "shutdown.exe -s -t 0"
		}
	}
	return
	
*LIgnorePass
	PostMessage hwnd, 0x0010, 0, 0 // WM_CLOSE
	return
	
*LKey
	if ( iparam == 13 ) {
		objsel -1
		if ( stat == 0 ) {
			gosub *LCheckPass
		}
	}
	return
	
// 設定の読み出し
*LLoadSetting
	sdim password, 32
	sdim tmp, 64
	dim  skip
	
	cntItems = ini_geti(ini, "Data", "CntEntries")
	sdim dirFile, MAX_PATH, cntItems
	sdim cmdline, MAX_CMD , cntItems
	sdim dirExec, MAX_PATH, cntItems
	dim  runmode,           cntItems
	
	sdim username, 128
	username = ini_gets(ini, "Data", "UserName")
	password = ini_gets(ini, "Data", "Password")
	
	if ( username != sysinfo(1) && username != "" ) {
		ini_puts ini, "Failure", "Data.UserName", sysinfo(1)
		end
	} else {
		ini_puts ini, "Failure", "Data.UserName", ""
	}
	
	lag  = ini_geti(ini, "Data", "TimeLag" )
	span = ini_geti(ini, "Data", "ExecSpan")
	last = ini_geti(ini, "Data", "LastSeeTime")
	
	// パスワードを復号化
	if ( peek(password) ) {
		getstr password, password, 1 // 先頭 1byte を無視する
	} else {
		bPass = true
	}
	return
	
*LLoadFiles
	i = 0
	sdim str_mode
	sdim temp, MAX_PATH + MAX_CMD + 15
	
	repeat cntItems
	;	idx  = 0
		sCnt = strf("%02d", cnt)
		
		// 実行パス
		ini_getsv ini, temp, "Entry", sCnt, "", MAX_PATH + MAX_CMD + 14
		getstr dirFile(i), temp, 0, ',', MAX_PATH  : idx = strsize
		dirFile(i) = ExpandEnvar( dirFile(i) )
		exist RemoveQuotes( dirFile(i) )
		if ( strsize < 0 || temp == "" ) {
			ini_puts ini, "Failure", "Entry." + sCnt, "Failed Loading"
			logmes "Failed Loading #" + cnt + ": " + dirFile(i) + ", " + temp
			memset dirFile(i), 0x00, MAX_PATH
			continue
		}
		
		if ( peek(temp, idx - 1) != ',' ) {
			temp += ",,,0"
			ini_puts ini, "Entry", sCnt, temp
		}
		
		// コマンドライン
		getstr cmdline(i), temp, idx, ',', MAX_CMD : idx += strsize
		cmdline(i) = ExpandEnvar( cmdline(i) )
		
		if ( peek(temp, idx - 1) != ',' ) {
			temp += ",,0"
			ini_puts ini, "Entry", sCnt, temp
			idx ++
		}
		
		// 起動ディレクトリ
		getstr dirExec(i), temp, idx, ',', MAX_PATH : idx += strsize
		dirExec(i) = ExpandEnvar( dirExec(i) )
		
		if ( peek(temp, idx - 1) != ',' ) {
			temp += ",0"
			ini_puts ini, "Entry", sCnt, temp
			idx ++
		}
		
		// 実行モード
		getstr str_mode, temp, idx : idx += strsize
		if ( str_mode == "" ) {
			temp += "0"
			ini_puts ini, "Entry", sCnt, temp
			runmode(cnt) = 0
		} else {
			runmode(cnt) = int(str_mode)
		}
		
		// 成功したら、Failure のところを消しておく
		ini_puts ini, "Failure", "Entry." + sCnt, ""
		i ++
	loop
	
	return
	
// ポップアップ・メニュー作成
#enum CMD_NONE = 0
#enum CMD_SKIP
#enum CMD_END
*LSettingMenu
	hmenu = CreatePopupMenu()
		AppendMenu hmenu, 0, CMD_SKIP,	"今すぐ実行する"
		AppendMenu hmenu, 0, CMD_END,	"終了する"
			AddSeparator hmenu
		AppendMenu hmenu, 0, CMD_NONE,	"なにもしない"
	return
	
*LExecFiles
	foreach dirFile
		if ( dirFile(cnt) != "" ) {
			if ( dirExec(cnt) == "" ) {
				dirExec(cnt) = getpath( dirFile(cnt), 32 )
			}
			chdir dirExec(cnt)
			exec  dirFile(cnt) + " " + cmdline(cnt), runmode(cnt)
		}
		await span
	loop
	return
	
*OnTrayIconEvent@
	// wparam = IconID, lparam = EventData
	
	// クリック (押下)
	if ( (lparam == 0x0201) || (lparam == 0x0204) ) {
		// メニューをポップアップ
		SetForegroundWindow hwnd
		TrackPopupMenuEx    hmenu, 0x0180, ginfo(0), ginfo(1), hwnd, NULL
		
		// stat に MenuID が返される
		switch (stat)
			case CMD_SKIP
				gosub *LLSkip
				swbreak
				
			case CMD_END
				gosub *LFreeTimer
				PostMessage hwnd, 0x0010, 0, 0 // WM_CLOSE
				swbreak
		swend
		
	// ダブルクリック
	} else : if ( lparam == 0x203 ) {
		gosub *LLSkip
	}
	return
	
*LLSkip
	gosub *LFreeTimer
	gosub *LOnTimer
	return
