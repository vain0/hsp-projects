#ifndef ig_font_from_hsp_hsp
#define ig_font_from_hsp_hsp

/*
HSP の font 命令を利用してフォントオブジェクトを作成するモジュール

%port
Windows GUI 32bit版限定
%*/

#module font_from_hsp

#uselib "gdi32.dll"
#func   CreateFontIndirect@font_from_hsp "CreateFontIndirectA" int
#func   GetObject@font_from_hsp    "GetObjectA"   int,int,int
#func   DeleteObject@font_from_hsp "DeleteObject" int

/*
%index
font_get_current_logfont
現在のLOGFONT構造体を取得
%prm
array lf: LOGFONT構造体をコピーする配列変数
%inst
カレントウィンドウに設定されている font の LOGFONT 構造体を lf にコピーする。
%*/
#deffunc font_get_current_logfont array lf,  \
	local bmscr

	dim lf, 15
	mref bmscr, 67
	GetObject bmscr(38), 60, varptr(lf)
	return
	
/*
%index
font_get_current_setting
現在のフォント設定を取得
%prm
face, pt, style
face: フォント名が代入される文字列型変数
pt: フォントサイズが代入される変数
style: フォントスタイルが代入される変数
%inst
font 命令に指定されたパラメータを取得する。
%*/
#deffunc font_get_current_setting var face, var pt, var style,  \
	local lf
	
	sdim face
	font_get_current_logfont lf
	getstr face, lf(7)
	pt = (logfont(0) ^ 0xFFFFFFFF) + 1
	
	style |= (  lf(4) >= 700             ) << 0	// Bold
	style |= ( (lf(5) & 0x000000FF) != 0 ) << 1	// Italic
	style |= ( (lf(5) & 0x0000FF00) != 0 ) << 2	// UnderLine
	style |= ( (lf(5) & 0x00FF0000) != 0 ) << 3	// StrikeLine
	style |= ( (lf(6) & 0x00040000) != 0 ) << 4	// AntiAlias
	return
	
/*
%index
font_from_hsp
フォントオブジェクトの作成
%prm
(face, pt, size)
return: フォントハンドル
%inst
新しいフォントオブジェクトを作成して、そのハンドルを返す。
パラメータは font 命令と同一。

返却されたフォントハンドルは、不必要になった後に必ず font_delete 命令に渡すこと。
%*/
#defcfunc font_from_hsp str face, int pt, int style,  \
	local face_bak, local pt_bak, local style_bak,  \
	local lf, local h_font
	
	// Backup
	font_get_current_setting face_bak, pt_bak, style_bak
	
	// Create new font
	font face, pt, style
	font_get_current_logfont lf
	CreateFontIndirect varptr(lf)
	h_font = stat
	
	// Restore
	font face_bak, pt_bak, style_bak
	return h_font
	
//------------------------------------------------
// コントロールのフォントを設定
// 
// @ WM_SETFONT を送る ( hFont, bRefresh )
//------------------------------------------------
#define global ChangeControlFont(%1,%2="",%3,%4=0,%5=1) _ChangeControlFont %1,%2,%3,%4,%5
#deffunc ChangeControlFont int p1, str p2, int p3, int p4, int bRefresh
	hFont = CreateFontByHSP(p2, p3, p4)
	sendmsg p1, 0x0030, hFont, bRefresh
	return hFont
	
/*
%index
font_delete
フォントオブジェクトの解放
%prm
h_font
h_font: フォントオブジェクトのハンドル
%*/
#deffunc font_delete int h
	if ( h ) { DeleteObject h }
	return
	
#global

//##############################################################################
//                サンプル・スクリプト
//##############################################################################
//------------------------------------------------
// サンプル 1
//------------------------------------------------
#if 0
	// StaticText Control を作成
	winobj "static", " \n表示するテキスト ", 0, 0x50000000, ginfo(12), ginfo(13)
	hStatic = objinfo(stat, 2)		// ハンドル
	
	ChangeControlFont hStatic, "ＭＳ 明朝", 58, 1 | 2	// 太字・斜体
	hFont = stat										// フォントハンドルが返る
	
	onexit goto *exit	// 終了に割り込む
	stop
	
*exit
	DeleteFont hFont	// 最後に解放
	end
	
#endif

//------------------------------------------------
// サンプル 2
//------------------------------------------------
#if 0

#define WAITTIME 120

	// A と B のフォント入れ替え
	screen 0, 320, 240,,  20, 60 : title "Window A" : mes "Window A です"
	screen 1, 320, 240,, 350, 60 : title "Window B" : mes "Window B です"
	
	wait WAITTIME
	
	sdim sFontName, 64, 2
	dim  nFontSize,  2
	dim  nFontStyle, 2
	
	gsel 0, 1
	mes  "sysfont 0"
	font "ＭＳ ゴシック", 24, 2 | 4 | 16
	mes " ＭＳ ゴシック , 24, 2 | 4 | 16"
	
	wait WAITTIME
	
	// ゴシックのデータ
	sFontName (0) = GetFontName()
	nFontSize (0) = GetFontSize()
	nFontStyle(0) = GetFontStyle()
	
	font "ＭＳ 明朝", 16
	mes  "ＭＳ 明朝, 16 に変更"
	
	wait WAITTIME
	
	// 明朝のデータ
	sFontName (1) = GetFontName()
	nFontSize (1) = GetFontSize()
	nFontStyle(1) = GetFontStyle()
	
	gsel 1, 1
	font sFontName(1), nFontSize(1), nFontStyle(1)
	mes "明朝体にしました"
	
	wait WAITTIME
	
	gsel 0, 1
	font sFontName(0), nFontSize(0), nFontStyle(0)
	mes "ＭＳ ゴシックに戻しました"
	stop
	
#endif

#endif
