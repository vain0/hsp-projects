// ex05 : 要素の挿入と除去

#include "var_vector.as"

// 要素の挿入
// VectorInsert    v, 区間 [, 初期値(0), ...]
// VectorInsert1   v, idx  [, 初期値(0)]
// VectorPushFront v       [, 初期値(0)]
// VectorPushBack  v       [, 初期値(0)]
// @ または、自動拡張
// @	v(idx) = x		( idx >= VectorSize(v) のとき )

// Insert
// @ 指定区間に新規要素を挿入し、初期値リストで初期化する。
// @	Insert [ 0, 4, 5 ],  [1, 4),  x, y, z → [ 0, x, y, z, 4, 5 ]
// @ 区間が反転している場合は後ろから初期化される。
// @	Insert [ 2, 0 ],  [3, 1),  a, b → [ 2, 0, b, a ]

// Insert1
// @ 指定した要素番号に新規要素を挿入し、初期値で初期化する。
// @	Insert [ 0, 1, 3 ],  [2],  2 → [ 0, 1, 2, 3 ]

// PushFront
// @ 先頭に新規要素を挿入し、初期化する。Insert1( 0 ) に等しい。

// PushBack
// @ 末尾に新規要素を挿入し、初期化する。Insert1( VectorSize(v) ) に等しい。

// 要素の除去
// VectorRemove   v, 区間
// VectorRemove1  v, idx
// VectorPopFront v
// VectorPopBack  v

// 要素の置換
// VectorReplace v, 区間, vector u
// @	v の指定区間を u に置き換える。

// 以上の命令はすべて関数としても使用できる。
// @ 命令の場合は変数が持つ vector を破壊的に処理するが、
// @ 関数の場合は第一引数の vector のスライスを作って処理をし、返却する。

#define ctype vec_toString(%1) "[" + VectorJoin((%1), ", ") + "]"	// cf. ex06

	v = vector( 1, 2, 3, 5 )	// 元の配列(vector)
	mes "default:\t" + vec_toString(v)
	
	VectorInsert1 v, 3, 4		// v(3) に 4 を挿入する
	mes "insert1 [3]:\t" + vec_toString(v)
	
	VectorPushFront v, 0		// v の先頭に 0 を挿入する
	mes "push-front:\t" + vec_toString(v)
	
	VectorPopBack v				// v の末尾を除去する
	mes "pop-back:\t" + vec_toString(v)
	
	VectorRemove1 v, 1			// v(1) を除去する
	mes "remove1 [1]:\t" + vec_toString(v)
	
	// スライスを取るのも、除去とあまり変わらない
	v = VectorSliceOut(v, 1, 3)		// v のうち [1, 3) = [1, 2] 以外の部分
	mes "off [1, 3):\t" + vec_toString(v)
	
	// 区間置換が可能
	v2 = vector(0, 1, 2, 3, 4, 5)
	mes "default(2):\t" + vec_toString(v2)
	v2 = VectorReplace( v2, 1, 3, vector("X", "Y") )
	mes "replace [1, 3):\t" + vec_toString(v2)
	
	stop
