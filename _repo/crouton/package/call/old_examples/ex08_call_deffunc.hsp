// call.hpi - sample 8

#include "call.as"

// ユーザ定義命令・関数を call する

// @ ユーザ定義命令・関数の defid 値から、それらを呼び出す。
// @ 処理する内容は ex06_.hsp と同じ。

// @ defidOf( コマンド )
// @	コマンドの defid 値を得る。
// @	ユーザ定義命令・関数の defid 値 (deffid 値) は call できる。
// @	かっこいい。

*main
	randomize
	
	dim n, 2
		n = rnd(100) + 1, rnd(100) + 1
	
	sOperator = "+", "-", "*", "/", "%"
	
	mes "(左辺) = " + n(0)
	mes "(右辺) = " + n(1)
	
	repeat 5
		result = call( GetOperator(cnt), n(0), n(1) )
		mes strf( "%d %s %d = %d", n(0), sOperator(cnt), n(1), result )
	loop
	
	// deffunc か defcfunc かはチェックしない
	call GetOperator(0), 1, 2
	mes "1 + 2 = " + stat
	
	// for test
	assert( call( GetOperator(0), n(0), n(1) ) == (n(0) + n(1)) )
	assert( call( GetOperator(1), n(0), n(1) ) == (n(0) - n(1)) )
	assert( call( GetOperator(2), n(0), n(1) ) == (n(0) * n(1)) )
	assert( call( GetOperator(3), n(0), n(1) ) == (n(0) / n(1)) )
	assert( call( GetOperator(4), n(0), n(1) ) == (n(0) \ n(1)) )
	stop
	
//################################################
//        二項演算モジュール
//################################################
#defcfunc GetOperator int number
	switch ( number )
		case 0 : return defidOf( binOpFunc_add )
		case 1 : return defidOf( binOpFunc_sub )
		case 2 : return defidOf( binOpFunc_mul )
		case 3 : return defidOf( binOpFunc_div )
		case 4 : return defidOf( binOpFunc_mod )
		default: swbreak
	swend
	return defidOf( binOpFunc_zero )
	
//------------------------------------------------
// 加減乗除 ++
//------------------------------------------------
#defcfunc binOpFunc_add int a, int b
	return a + b
	
#defcfunc binOpFunc_sub int a, int b
	return a - b
	
#defcfunc binOpFunc_mul int a, int b
	return a * b
	
#defcfunc binOpFunc_div int a, int b
	return a / b
	
#defcfunc binOpFunc_mod int a, int b
	return a \ b
	
#defcfunc binOpFunc_zero int a, int b
	return 0
	