#packopt name "ZeoFivePlayer"
#packopt hide 1
#packopt orgpath 1

#ifdef _DEBUG
 #undef picload
 #define global picload(%1,%2=0) logmes {"%1"}: picload@hsp %1,%2
#endif

#include "hsp_green/src/all.hsp"
#include "Mo/mod_conicCurve.hsp"
#include "Mo/boxl.hsp"

#include "ZeoHeader.hsp"
#include "ZpHeader.hsp"		// player ヘッダ
#include "mod_ZeoFive.hsp"

	goto *main

#include "ZpVariable.hsp"	// 変数の初期化
#include "ZpFunc.hsp"		// 命令・関数
#include "ZpRoutine.hsp"	// サブルーチン群
#include "ZpScreen.hsp"		// 画面のセットなど

///前処理
*main
	randomize				// 乱数初期化
	gosub *ClearVariable	// 変数初期化
	gosub *CreateMainScreen	// メイン画面
	gosub *LoadPictures		// 画像ファイルを読み込む
	goto  *Top

///タイトル画面
*Top
	player = -1, -1
	clrobj
	gosub *RedrawTitle		// トップを描画
	
	objsize 120, 30, 40
	
	pos 60, 420 : button gosub "デッキを開く", *OpenDeck
	pos 60+(120+10)*1, 420 : button goto "CPU戦", *GameStart
	pos 60+(120+10)*2, 420 : button gosub "ルール説明", *Rule
	pos 60+(120+10)*3, 420 : button goto  "終了", *LExit
	gsel_show wID_Main
	stop
	
*LContinue
	if (deckpath(ID_YOU) != "") {
		//ゲーム中のステータス変化を直すためにデッキをリロード
		LoadZeoDeck ID_YOU, deckpath(ID_YOU), true // no pics
	}
	goto *Top
	
//デッキを開く
*OpenDeck
	OpenDeckWithDialog ID_YOU
	if (stat) { return true }
	gosub *RedrawTitle
	return false
	
//CPU戦を開始
*GameStart
#ifdef _DEBUG
/*
	// 開発時用のテストデータ
	// デッキ選択画面を表示する
	repeat 2
		num = cnt
		repeat Count_CardsInDeck
			cardname(cnt, num) = strf("カード %c", 'A' + cnt)
			HP(cnt, num) = 50
			S (cnt, num) = 50
			A (cnt, num) = 50
			I (cnt, num) = 50
		loop
		cardcls(0, num) = ClsId_Silver, ClsId_Gold, ClsId_King, ClsId_Gold, ClsId_Silver
	loop
	deckpath = "*", "*"
//*/
#endif

	if (deckpath(ID_YOU) == "") { gosub *OpenDeck : if (stat) { stop } }
	OpenDeckWithDialog ID_EMY
	if (stat) { stop }
	
	gosub *ClearVariableBeforeGameBeginning
	gosub *ClearMainBeforeGameBeginning
	gosub *W_SelectCard
	gosub *E_SelectCard
	;gosub *RedrawMain : redraw
	bBeginning --
	goto *mainlp
	
///ゲームのメインループ
///再描画→判定→戦闘→死亡確認
*mainlp
	if ( bGameOver ) { stop }
	
	// 再描画する
	gosub *RedrawMain : redraw
	
	// SPD 判定 (先攻の値が返る)
	bAttackPlayer = JudgeSPD()
	
	// どっちで攻撃するか決める
	gosub *W_SelectWayToAttack
	gosub *E_SelectWayToAttack
	
	// 先攻 → 後攻、
	// 後攻 → 先攻 に攻撃
	repeat 2
		Attack bAttackPlayer
		if ( stat ) {
			Die bAttackPlayer ^ 1	// 相手側を倒した
			bAttackPlayer ^= 1
			break
		}
		bAttackPlayer ^= 1	// 反転
	loop
	
;	if ( bGameOver ) { goto *main }
	
	goto *mainlp
	
///終了割り込み
*LExit
	end : end
	