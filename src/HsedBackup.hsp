#include "uedai_userdef/all.hsp"
#define global Str_AppName "HsedBackup"

#packopt name Str_AppName
#packopt hide true

#include "hsedsdk.as"
#include "util/note_each.hsp"
#include "util/dir_exists.hsp"
#include "util/path_flatten.hsp"
#include "util/MCIni.hsp"
#include "util/trayicon.hsp"
#include "util/MCTimer.hsp"

#define global success true
#define global failure false

#define Str_IniName (Str_AppName + ".ini")
#define global cfg cfg_global@

#module

#uselib "user32.dll"
#func   PostMessage "PostMessageA" int,int,int,sptr

#deffunc RegularQuit
	PostMessage hwnd, 0x0010, 0, 0
	return
	
#deffunc mkdir_if_able str dir
	if ( dir_exists(dir) == false ) {
		mkdir dir
	}
	return
	
#defcfunc getpath_without_ext str _path,  local path, local ext
	path = _path
	ext = getpath(path, getpath_ext)
	poke path, strlen(path) - strlen(ext), 0
	return path
	
#defcfunc new_temp_file_name str ext
	return strf("%02d-%02d-%02d-%02d-%02d-%02d%s", gettime_year \ 100, gettime_month, gettime_mday, gettime_hour, gettime_min, gettime_sec, ext)
	
#global

*main
	gosub *LInitialize
	stop
	
*LInitialize
	gosub *LInitSetting
	gosub *LInitTimer
	gosub *LInitIcon
	
	sdim path, MAX_PATH
	return
	
*LInitSetting
	ini_new cfg, dir_exe2 + "/" + Str_IniName
	bakpath = ini_gets(cfg, "backup", "dir_bak", dir_exe2 + "/_bak")
	spnTime = ini_geti(cfg, "backup", "span", 60 * 1000)
	
	max_cnt_bak_files = ini_geti(cfg, "backup", "max_cnt_bak_files", 30)
	
	mkdir_if_able bakpath
	return
	
*LInitTimer
	timer_new timerBackup, , spnTime
	oncmd gosub *OnTimer, WM_TIMER@MCTimer
	return
	
*LInitIcon
	SetTrayIconFile ""
	CreateTrayIcon Str_AppName
	oncmd gosub *OnTrayIconEvent@, WM_TRAYEVENTSTART@trayicon
	return
	
*OnTimer
	gosub *LHsedExists
	gosub *LBackup
	return
	
*LBackup
	backup_all
	return
	
#module

#deffunc backup_all  local cnt_tabs, local id_footy
	
	hsed_gettabcount cnt_tabs
	logmes strf("Backup (%d tabs) %s", cnt_tabs, new_temp_file_name(""))
	
	repeat cnt_tabs
		hsed_getfootyid id_footy, cnt
		backup_tab id_footy
	loop
	return
	
#deffunc backup_tab int id_footy,  local is_modified, local path, local path_bakdir, local content
	
	hsed_getmodify is_modified, id_footy
	if ( is_modified == false ) { return }
	
	//パスを取得
	//一時ファイル用のディレクトリを用意
	hsed_getpath path, cnt
	if ( stat ) { return }
	if ( path == "" ) { path = "_" + cnt } //未保存タブ
	path        = path_flatten(path)
	path_bakdir = bakpath@ + "/" + path
	mkdir_if_able path_bakdir
	
	//保存
	hsed_gettext content, id_footy
	backup_save path, path_bakdir, content
	return
	
#deffunc backup_save var path_tar, var path_bakdir, var content,  local cnt_bak_files, local path_bak_files, local path_bak

	bsave path_bakdir + "/" + new_temp_file_name(getpath(path_tar, getpath_ext)), content, strlen(content)
	cnt_bak_files = ini_geti(cfg, path_tar, "count") + 1
	
	//バックアップが多すぎる場合は、古いものから削除
	if ( cnt_bak_files > max_cnt_bak_files@ ) {
		dirlist path_bak_files, path_bakdir + "/*", dirlist_files
		cnt_bak_files = stat
		note_each path_bak, path_bak_files
			if ( cnt >= (cnt_bak_files - max_cnt_bak_files@ / 2) ) { break }
			delfile path_bakdir + "/" + path_bak
		note_each_end
		
		cnt_bak_files = max_cnt_bak_files@ / 2
	}
	
	ini_puti cfg, path_tar, "count", cnt_bak_files
	return
#global

*LHsedExists
	hsed_exist
	if ( stat == false ) { end }
	return
	
*OnTrayIconEvent@
	// wparam = idIcon
	
	switch ( lparam )
		case 0x0201: //正クリック 押下
			gosub *LBackup
			timer_reset timerBackup
			swbreak
		case 0x0203: //正クリック W-Click
			RegularQuit
			swbreak	
		;case 0x0204: //逆クリック 押下
	swend
	return
