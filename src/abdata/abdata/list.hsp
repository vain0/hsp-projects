#ifndef ig_abdata_list_hsp
#define ig_abdata_list_hsp

#module abdata_list_impl arrs_, aps_, len_

/**
arrs_(t):
	型 t の配列を持つ abbox

aps_(i):
	self が持つ i 番目の要素が、arrs_ のどこに位置しているかを表す値。
	t := ap_type(aps_(i)) は、その要素の型を表す。
	k := ap_ix  (aps_(i)) は、その要素の値の arrs_(t) における位置を表す。

len_:
	self が持つ要素の個数。
//*/

#define ctype ap_type(%1) (((%1) & 0xF0000000) >> 28)
#define ctype ap_ix(%1)    ((%1) & 0x0FFFFFFF)
#define ctype ap_make(%1, %2) ((((%1) & 0xF) << 28) | ap_ix(%2))
#define vartype_max 4

#define true 1
#define false 0
#define int_max 0x7FFFFFFF
#define sizeof_int 4

#define ctype ap_type_at(%1) ap_type(aps_(%1))
#define ctype ap_ix_at(%1)   ap_ix(aps_(%1))

#modinit
	listImpl_init thismod
	return getaptr(thismod)
	
#modfunc listImpl_init

	assert vartype("struct") == 5
	dimtype arrs_, 5, vartype_max + 1
	
	abbox_new arrs_
	repeat vartype_max, 1
		abbox_new arrs_, cnt
	loop
	
	// vartype 0 is invalid
	delmod arrs_(0)
	assert varuse(arrs_(0)) == 0
	
	assert len_ == 0
	return
	
#modfunc listImpl_clear

	dim arrs_
	dim aps_
	len_ = 0
	listImpl_init thismod
	return
	
#modfunc listImpl_dup_aps__ array ref_aps
	dup ref_aps, aps_
	return
	
#modcfunc listImpl_len
	return len_
	
#modcfunc listImpl_vartype int i
	return ap_type_at(listImpl_regular_ix(thismod, i))
	
#modcfunc listImpl_regular_ix int i

	if ( 0 <= i && i < len_ ) {
		return i
	} else : if ( i < 0 && i + len_ >= 0 ) {
		return i + len_
	}
	assert : end 1
	
#modcfunc listImpl_regular_ix_or_end int i

	if ( 0 <= i && i <= len_ ) {
		return i
	} else : if ( i == abdata_ix_end ) {
		return len_
	} else : if ( i < 0 && i + len_ >= 0 ) {
		return i + len_
	}
	assert : end 1
	
/**
_unsafe_get_v thismod, result, i, removes

i 番目の要素の値を result に代入する。
removes が真なら、その要素を erase する。
//*/
#define listImpl_unsafe_get_v(%1 = thismod, %2, %3, %4) \
	abbox_unsafe_get_v arrs_(ap_type_at(%3)), %2, ap_ix_at(%3)  :\
	if (%4) { listImpl_erase_range %1, (%3), (%3) + 1 }       :\
	//
	
#modcfunc listImpl_try_get var result, int i, int removes
	if ( 0 <= i && i < len_ ) {
		listImpl_unsafe_get_v thismod, result, i, removes
		return true
	} else {
		return false
	}
	
/**
_unsafe_dup_v thismod, result, i

result を、i 番目の要素のデータへのクローン変数にする。
//*/
#define listImpl_unsafe_dup(%1 = thismod, %2, %3) \
	abbox_unsafe_dup_v arrs_(ap_type_at(%3)), %2, ap_ix_at(%3)

#modcfunc listImpl_try_dup array ref, int i
	if ( 0 <= i && i < len_ ) {
		listImpl_unsafe_dup thismod, ref, i
		return true
	} else {
		return false
	}
	
#modfunc listImpl_setv var value, int i

	if ( i < 0 ) {
		listImpl_setv thismod, value, listImpl_regular_ix(thismod, i)
		return
	}
	assert 0 <= i && i < len_
	if ( vartype(value) == ap_type_at(i) ) {
		abbox_unsafe_set_v arrs_(ap_type_at(i)), ap_ix_at(i), value
		
	// 型が変わる場合
	// 元の要素を除去し、新しく挿入した要素へのリンクで置き換える。
	} else {
		abbox_unsafe_erase_at arrs_(ap_type_at(i)), ap_ix_at(i)
		abbox_add arrs_(vartype(value)), value
		aps_(i) = ap_make(vartype(value), stat)
	}
	return
	
#modfunc listImpl_insertv var value, int i

	if ( i < 0 ) {
		listImpl_insertv thismod, value, listImpl_regular_ix_or_end(thismod, i)
		return
	}
	
	// 要素数の自動拡張
	if ( i > len_ ) {
		repeat i - len_, len_
			listImpl_insertv thismod, defvar@__abdata, cnt
		loop
	}
	
	// 新要素に対応する ap のための要素を挿入
	arrlen_insert_no_init aps_, len_, i
	
	// 新要素を挿入
	abbox_add arrs_(vartype(value)), value
	aps_(i) = ap_make(vartype(value), stat)
	return
	
#modfunc listImpl_erase_range int i_beg, int i_end

	if ( i_beg < 0 || i_end < 0 ) {
		listImpl_erase_range thismod, listImpl_regular_ix_or_end(thismod, i_beg), listImpl_regular_ix_or_end(thismod, i_end)
		return
	}
	assert 0 <= i_beg && i_beg <= i_end && i_end <= len_
	
	repeat i_end - i_beg, i_beg
		abbox_unsafe_erase_at arrs_(ap_type_at(cnt)), ap_ix_at(cnt)
	loop
	
	arrlen_erase_range aps_, len_, i_beg, i_end
	return
	
#modfunc listImpl_iter_swap int i0, int i1
	arrlen_iter_swap aps_, len_, i0, i1
	return
	
#modfunc listImpl_permutate array perm,  \
	local done, local i
	
	assert length(perm) >= len_
	if ( len_ > 0 ) {
		dim done, len_
		repeat len_ - 1
			// cnt を含む巡回置換を適用する
			i = cnt : done(cnt) = true
			while ( done(perm(i)) == false )
				abdata_swap_i aps_(i), aps_(perm(i))
				i = perm(i) : done(i) = true
			wend
		loop
	}
	return
	
#modfunc listImpl_sort int sort_mode,  \
	local perm
	
	listImpl_ix_sort thismod, perm, sort_mode
	return
	
#modfunc listImpl_ix_sort array ix_dst, int sort_mode,  \
	local p, local p1, local e1, local p2, local e2, local size_segment, local size_seg_merged, \
	local ix_tmp, local aps_tmp, local l_ref, local r_ref, local cmp
	
	dim ix_tmp, len_
	dim ix_dst, len_
	repeat len_
		ix_tmp(cnt) = cnt
		ix_dst(cnt) = cnt
	loop
	
	repeat
		size_segment = 1 << cnt
		
		repeat
			p  = size_segment * (cnt * 2)
			p1 = p
			e1 = p1 + size_segment
			p2 = e1
			e2 = limit(p2 + size_segment, 0, len_)
			size_seg_merged = (e2 - p)
			
			if ( size_seg_merged < size_segment ) { break }
			
			// 区間 [p1, e1) と [p2, e2) をマージ
			repeat size_seg_merged
				if ( p2 >= e2 ) {
					ix_tmp(cnt) = ix_dst(p1) : p1 ++
				} else : if ( p1 >= e1 ) {
					ix_tmp(cnt) = ix_dst(p2) : p2 ++
				} else {
					listImpl_unsafe_dup thismod, l_ref, ix_dst(p1)
					listImpl_unsafe_dup thismod, r_ref, ix_dst(p2)
					cmp = abdata_compare(l_ref, r_ref)
					if ( cmp == 0 || ((cmp < 0) == (sort_mode == abdata_sort_ascending)) ) {
						ix_tmp(cnt) = ix_dst(p1) : p1 ++
					} else {
						ix_tmp(cnt) = ix_dst(p2) : p2 ++
					}
				}
			loop
			
			memcpy ix_dst(p), ix_tmp, size_seg_merged * sizeof_int
		loop
		
		if ( len_ <= size_segment ) { break }
	loop
	
	// aps_ に結果を反映
	listImpl_permutate thismod, ix_dst
	return
	
#global

//##############################################################################
// wrapper

#define global list_new(%1, %2 = 0, %3 = defvar@__abdata) \
	%1 = list_make_replicate(%2, %3)

#define global list_delete(%1) \
	delmod abdataInsts(%1)

#define global ctype list_make(%1 = 0, %2 = defvar@__abdata) \
	list_make_replicate(%1, %2)
	
#define global list_clear(%1) \
	listImpl_clear abdataInsts(%1)

#define global ctype list_size(%1) listImpl_len(abdataInsts(%1))
#define global list_length list_size
#define global ctype list_empty(%1) (list_size(%1) == 0)

#define global ctype list_vartype(%1, %2) listImpl_vartype(abdataInsts(%1), %2)
#define global ctype list_vartype_front(%1, %2) list_vartype((%1), 0)
#define global ctype list_vartype_back(%1, %2)  list_vartype((%1), -1)

#define global ctype list_regular_ix(%1, %2)        listImpl_regular_ix(abdataInsts(%1), %2)
#define global ctype list_regular_ix_or_end(%1, %2) listImpl_regular_ix_or_end(abdataInsts(%1), %2)

#define global ctype list_try_get(%1, %2, %3) \
	listImpl_try_get(abdataInsts(%1), %2, %3, 0 /* removes */)

#define global ctype list_try_pop(%1, %2, %3) \
	listImpl_try_get(abdataInsts(%1), %2, %3, 1 /* removes */)

#define global ctype list_get(%1, %2)  list_get__(%1, %2, 0 /* removes */)
#define global ctype list_pop(%1, %2)  list_get__(%1, %2, 1 /* removes */)
#define global ctype list_get_front(%1)  list_get(%1, 0)
#define global ctype list_pop_front(%1)  list_pop(%1, 0)
#define global ctype list_get_back(%1)   list_get(%1, -1)
#define global ctype list_pop_back(%1)   list_pop(%1, -1)

#define global list_getv(%1, %2, %3)    list_getv__ %1, %2, %3, 0 /* removes */
#define global list_popv(%1, %2, %3)    list_getv__ %1, %2, %3, 1 /* removes */
#define global list_getv_front(%1, %2)  list_getv %1, %2, 0
#define global list_popv_front(%1, %2)  list_popv %1, %2, 0
#define global list_getv_back(%1, %2)   list_getv %1, %2, -1
#define global list_popv_back(%1, %2)   list_popv %1, %2, -1

#define global ctype list_try_dup(%1, %2, %3) \
	listImpl_try_dup(abdataInsts(%1), %2, %3)

#define global ctype list_ref(%1, %2) %t__ref %i0 \
	_cat@__abdata(%p,@__tmp)( \
		list_ref_impl(%1, _cat@__abdata(%p,@__tmp), (%2)) \
	) %o0 //

#define global list_set(%1, %2, %3) %tabdata \
	_cat@__abdata(%i,@__tmp) = %2 :\
	list_setv %1, _cat@__abdata(%o,@__tmp), %3

#define global list_setv(%1, %2, %3) \
	listImpl_setv abdataInsts(%1), %2, %3

#define global list_insertv(%1, %2, %3) \
	listImpl_insertv abdataInsts(%1), %2, %3

#define global list_insert(%1, %2, %3) %tabdata \
	_cat@__abdata(%i,@__tmp) = %2 :\
	list_insertv %1, _cat@__abdata(%o,@__tmp), %3

#define global list_push_front(%1, %2)  list_insert  (%1), %2, 0
#define global list_pushv_front(%1, %2) list_insertv (%1), %2, 0

#define global list_push_back(%1, %2)   list_insert  (%1), %2, abdata_ix_end
#define global list_pushv_back(%1, %2)  list_insertv (%1), %2, abdata_ix_end
#define global list_add list_push_back

#define global list_erase_range(%1, %2, %3) \
	listImpl_erase_range abdataInsts(%1), %2, %3

#define global list_erase_front(%1, %2)   list_erase %1, 0
#define global list_erase_back(%1, %2)    list_erase %1, -1

#define global list_iter_swap(%1, %2, %3) \
	listImpl_iter_swap abdataInsts(%1), %2, %3

#define global list_reverse(%1, %2 = 0, %3 = abdata_ix_end) \
	list_reverse__ %1, %2, %3

#define global list_permutate(%1, %2) \
	listImpl_permutate abdataInsts(%1), %2

#define global list_sort(%1, %2 = abdata_sort_ascending) \
	listImpl_sort abdataInsts(%1), %2
	
#define global list_ix_sort(%1, %2, %3 = abdata_sort_ascending) \
	listImpl_ix_sort abdataInsts(%1), %2, %3

#define global ctype list_lb(%1, %2, %3 = abdata_sort_ascending)  list_lb_ub__(%1, %2, %3, 0 /* finds_lb */)
#define global ctype list_ub(%1, %2, %3 = abdata_sort_ascending)  list_lb_ub__(%1, %2, %3, 1 /* finds_ub */)

#define global list_sorted_insertv(%1, %2, %3 = true@abdata_list_impl, %4 = abdata_sort_ascending) \
	list_sorted_insertv__ %1, %2, %3, %4

#define global list_sorted_erasev(%1, %2, %3 = int_max@abdata_list_impl, %4 = abdata_sort_ascending) \
	list_sorted_erasev__ %1, %2, %3, %4

#ifdef _debug
	#define global list_dbglog(%1) list_dbglog__ %1, "%1"
#else
	#define global list_dbglog(%1) :
#endif //defined(_debug)

#module
#defcfunc list_make_empty
	
	// abdataInsts_var の伸長
	#define __len length(abdataInsts_var)
		if ( __len > 1 ) : if ( varuse(abdataInsts_var(__len - 2)) ) {
			abdataInsts_var(__len * 2) = nullmod@__abdata
		}
	#undef __len
	
	newmod abdataInsts_var, abdata_list_impl@
	return stat
#global

#module
#defcfunc list_make_replicate int count, var value,  \
	local self
	
	self = list_make_empty()
	repeat count
		list_insertv self, value, cnt
	loop
	return self
#global

#module
#defcfunc list_from_array array src, int len,  \
	local self
	
	self = list_make_empty()
	list_chain_array self, src, len
	return self
#global

#module
#deffunc list_copy int self, int rhs
	list_clear self
	list_chain self, rhs
	return
#global

#module
#deffunc list_chain int self, int rhs,  \
	local i, local ref
	
	while ( list_try_dup(rhs, ref, i) ) // avoid copying
		list_pushv_back self, ref
		i ++
	wend
	return
#global

#module
#deffunc list_chain_array int self, array arr, int len
	assert arrlen_is_valid_len(arr, len)
	repeat len
		list_pushv_back self, arr(cnt)
	loop
	return
#global

#module
#defcfunc list_is_valid int self, int i
	return 0 <= i && i < list_size(self)
#global

#module
#defcfunc list_get__ int self, int i, int removes,  \
	local result
	
	if ( listImpl_try_get(abdataInsts(self), result, list_regular_ix(self, i), removes) ) {
		return result
	}
	assert : end 1
#global

#module
#deffunc list_getv__ int self, var result, int i, int removes

	if ( listImpl_try_get(abdataInsts(self), result, list_regular_ix(self, i), removes) ) {
		return
	}
	assert : end 1
#global

#module
#deffunc list_dup int self, array ref, int i

	if ( list_try_dup(self, ref, list_regular_ix(self, i)) ) {
		return
	}
	assert : end 1

#defcfunc list_ref_impl int self, array ref, int i
	list_dup self, ref, i
	return 0
#global

#module
#deffunc list_erase int self, int i
	if ( i < 0 ) {
		list_erase self, list_regular_ix(self, i)
		return
	}
	list_erase_range self, i, i + 1
	return
#global

#module
#define global list_resize(%1, %2, %3 = defvar@__abdata) \
	list_resize__ %1, %2, %3

#deffunc list_resize__ int self, int new_len, var value,  \
	local len
	
	assert new_len >= 0
	len = list_size(self)
	if ( len <= new_len ) {
		repeat new_len - len
			list_pushv_back self, value
		loop
		
	} else {
		list_erase_range self, new_len, len
	}
	return len
#global

#module
#deffunc list_iter_move int self, int i_src, int i_dst,  \
	local aps
	
	listImpl_dup_aps__ abdataInsts(self), aps
	arrlen_iter_move aps, list_size(self), i_src, i_dst
	return
#global

#module
#deffunc list_reverse__ int self, int i_beg, int i_end,  \
	local aps
	
	listImpl_dup_aps__ abdataInsts(self), aps
	arrlen_reverse aps, list_size(self), i_beg, i_end
	return
#global

#module
#define global list_shuffle(%1, %2 = 0, %3 = abdata_ix_end) \
	list_shuffle__ %1, %2, %3

#deffunc list_shuffle__ int self, int i_beg, int i_end,  \
	local aps, local i
	
	if ( i_beg < 0 || i_end < 0 ) {
		list_shuffle__ self, list_regular_ix_or_end(self, i_beg), list_regular_ix_or_end(self, i_end)
		return
	}
	listImpl_dup_aps__ abdataInsts(self), aps
	// Durstenfeld's algorithm
	for i, list_size(self), 0, -1
		abdata_swap_i aps(i - 1), aps(rnd(i))
	next
	return
#global

#module
#defcfunc list_compare int self, int rhs,  \
	local len, local cmp, local l_ref, local r_ref
	
	len = list_size(self)
	cmp = len - list_size(rhs) 
	if ( cmp ) { return cmp }
	
	repeat len
		list_dup self, l_ref, cnt
		list_dup rhs , r_ref, cnt
		cmp = abdata_compare(l_ref, r_ref)
		if ( cmp ) { break }
	loop
	return cmp
#global

#module
#defcfunc list_count int self, var value,  local count, local ref
	repeat list_size(self)
		list_dup self, ref, cnt
		if ( abdata_compare(value, ref) == 0 ) { count ++ }
	loop
	return count
#global

#module
#defcfunc list_is_sorted int self, int sort_mode,  \
	local i, local l_ref, local r_ref
	
	for i, 0, list_size(self) - 1
		list_dup self, l_ref, i
		list_dup self, r_ref, i + 1
		if ( abdata_compare(l_ref, r_ref) * (1 - 2 * sort_mode) > 0 ) {
			return false@__abdata
		}
	next
	return true@__abdata
#global

#module
#defcfunc list_lb_ub__ int self, var value, int sort_mode, int finds_ub, \
	local lb, local ub, local mid, local ref, local cmp
	
	assert list_is_sorted(self, sort_mode)
	lb = -1 : ub = list_size(self)
	while ( ub - lb > 1 )
		mid = lb + (ub - lb) / 2
		list_dup self, ref, mid
		cmp = abdata_compare(ref, value) * (1 - 2 * sort_mode)
		if ( ((finds_ub != 0) && cmp == 0) || cmp < 0 ) {
			lb = mid
		} else {
			ub = mid
		}
	wend
	return ub
#global

#module
#deffunc list_equal_range int self, var value, var lb, var ub, int sort_mode
	lb = list_lb(self, value, sort_mode)
	ub = list_ub(self, value, sort_mode)
	return
#global

#module
#deffunc list_sorted_insertv__ int self, var value, int may_dup, int sort_mode,  \
	local lb, local ub
	
	list_equal_range self, value, lb, ub, sort_mode
	if ( may_dup || lb == ub ) {
		list_insertv self, value, ub
	}
	return
#global

#module
#deffunc list_sorted_erasev__ int self, var value, int max_count, int sort_mode,  \
	local lb, local ub
	
	list_equal_range self, value, lb, ub, sort_mode
	lb = ub - limit(ub - lb, 0, max_count)
	list_erase_range self, lb, ub
	return
#global

#module
#deffunc list_iter_init int self, var iter_data
	iter_data = -1
	return
	
#defcfunc list_iter_next int self, var iter, var iter_data
	iter_data ++
	return list_try_get(self, iter, iter_data)
#global

#ifdef _debug
#module
#deffunc list_dbglog__ int self, str ident,  \
	local ref
	
	logmes "[" + ident + "] debug-log"
	repeat list_size(self)
		list_dup self, ref, cnt
		logmes strf("#%2d: %s", cnt, str(ref))
	loop
	logmes ""
	return
#global
#endif //defined(_debug)

#define global listNull abdataNull

#endif
