

#include "Renzok.hsp"

#include "Mo/cond.as"

*main
	gosub *l_initialize
	stop
	
*exit
	if ( bDragging ) { ClipCursor NULL : bDragging = false }
	end : end
	
//######## メッセージハンドラ ##################################################
*OnKeyLabel
	if ( ginfo_act == wID_Main ) {
		
		// [Ctrl]
		if ( getkey(17) ) {	
			if ( iparam == 'S' ) {
				gosub *Save
				return
			}
		}
		
	}
	return
	
*l_resize_editbox
	MoveWindow  BoxInfo, LBWIDTH + 10,            5, BOXWIDTH, BOXHEIGHT, true
	return
	
*OnCommand
	if ( lparam == LbInfo ) {
		// リストボックスの割り込み
		wNotifyCode = HIWORD(wparam)
		
		switch wNotifyCode
		case 1										// LBN_SELCHANGE
			sendmsg hMain, UWM_LOAD, 0, 0
			swbreak
		case 2										// LBN_WCLICK
			sendmsg hMain, UWM_CHANGEPATH, 0, 0
			swbreak
		swend
		
	} else : if ( lparam == BoxInfo ) {
		// 編集ボックスの割り込み
		wNotifyCode = HIWORD(wparam)
		if ( wNotifyCode == 0x300 ) {		// EN_CHANGE (編集された)
			
			if ( bModified == false ) {				// まだ編集されていなかったときだけ
				sendmsg BoxInfo, 0x00B8, 0, 0		// EM_GETMODIFY (編集フラグを取得)
				if ( stat ) {
					editbox_set_modify_flag true
				}
			}
		}
	}
	return
	
*OnLoad
	// 読み込むファイル名を取得
	sendmsg LbInfo, 0x0188, 0, 0 : iList = stat
	sendmsg LbInfo, 0x0189, iList, varptr(stmp)
	
	if ( iList < 0 ) { return }					// 選択アイテムがない場合も無視する
	
	// Ｗクリックが必要なものは無視
	if ( stmp == STR_SEPARATOR ) { return }
	if ( stmp == STR_DIALOG )    { return }		// フォルダ移動か？
	if ( peek(stmp) == '[' )     { return }		// フォルダか？
	
	// ファイルなら
	stmp = path +"\\"+ stmp
	if ( filepath == stmp ) { return }	// すでに開いている
	
	exist stmp
	if ( strsize < 0 ) { return }		// ない ( IsBinFile が調べてくれる )
	if ( strsize >= MAX_TEXTLEN ) {
		EnableBox {"
			ファイルサイズが大きすぎます
			(This file's size is too big to load it.)
			"}+ ( strsize / 1024 ) +{"KB
		"}
		return
		
	} if ( IsBinFile( stmp ) <= 0 ) {	// 0 = Binary : 1 = Text : -1 = Unknown
		EnableBox "(bin file)"
		return
		
	} if ( bEnable ) {
		EnableWindow BoxInfo, true
		bEnable = false
	}
	
	filepath = stmp				// ファイルを変更した
	
;	memexpand buf, strsize + 5
	notesel   buf
	noteload  filepath
	noteunsel
	
	objprm BoxInfo(1), buf
	editbox_set_modify_flag false
	return
	
*OnChangePath
	// 読み込むファイル名を取得
	sendmsg LbInfo, 0x0188, 0, 0 : iList = stat
	sendmsg LbInfo, 0x0189, iList, varptr(stmp)
	
	if ( iList < 0 ) { return }					// 選択アイテムがない場合も無視する
	
	// セパレータか？
	if ( stmp == STR_SEPARATOR ) { return }
	
	// フォルダ移動か？
	if ( stmp == STR_DIALOG ) {
		foldlg "", path, 0
		if ( stat == false ) {			// 成功したとき
			path = refstr
			sendmsg hMain, UWM_RENEWAL_LIST, 0, 0
		}
		return
	}
	
	// フォルダか？
	if ( peek(stmp) == '[' ) {
		
		if ( stmp == STR_BACK ) {
			// 最後のフォルダ名と \ を取り除く
			     path = getpath(path, 32)
			poke path,   strlen(path) - 1, 0
			
		} else {
			getstr stmp, stmp, 1, ']'			// フォルダ名を取得
			path += "\\"+ stmp
		}
		
		sendmsg hMain, UWM_RENEWAL_LIST, 0, 0
		return
	}
	return
	
*OnRenewal
	// ListBox を再構築する
	sendmsg LbInfo, 0x0184, 0, 0						// LB_RESETCONTENT
;	sendmsg LbInfo, 0x018D, 0x0010, path +"\\*.*"		// LB_DIR (wparam == DDL_DIRECTORY)
	sendmsg LbInfo, 0x000B, false, 0					// WM_SETREDRAW ( 再描画禁止 )
	DirlistEx  filelist, path
	NoteRepeat filelist
		sendmsg LbInfo, 0x0180, 0, nrNote
	NoteLoop
	sendmsg LbInfo, 0x0180, 0, STR_DIALOG				// LB_ADD
	sendmsg LbInfo, 0x000B, true, 0					// WM_SETREDRAW ( 再描画許可 )
	
	return
	
//######## サブルーチン群 ######################################################
*l_var_init_custom
	dim  BoxInfo, 2				// EditBox 〃
	return
	
*l_create_listbox
	font LISTBOX_FONT_FAMILY, LISTBOX_FONT_SIZE
	objmode objmode_usefont, false
	objsize LBWIDTH, LBHEIGHT
	pos 5, 5 : listbox iList, 0, ""
	LbInfo = objinfo(stat, 2), stat
	return
	
*l_create_editbox
	font EDITOR_FONT_FAMILY, EDITOR_FONT_SIZE
	objmode objmode_usefont, false
	pos LBWIDTH + 10, 5 : mesbox buf, BOXWIDTH, BOXHEIGHT, 5, MAX_TEXTLEN
	BoxInfo = objinfo(stat, 2), stat
	return
	
*Save
	if ( filepath == STR_DIALOG ) { return }
	
	if ( peek(filepath) == 0 ) {
		// 選べる
		dialog "*", 17, "保存先"
		if ( stat == false ) {
			gosub *l_focus_editbox
			return
		}
		filepath = refstr
	}
	
	notesel buf
	notesave filepath
	noteunsel
	
	editbox_set_modify_flag false
	gosub *l_focus_editbox
	return
	
*l_init_callback
	return

*l_focus_editbox
	objsel BoxInfo(1)	// カーソルを与える
	return
	
// 編集済みフラグを変更する
#deffunc editbox_set_modify_flag int prm_flag
	bModified = prm_flag
	sendmsg BoxInfo, 0x00B9, bModified, 0
	Settitle getpath(filepath, 8) + cond_s(bModified, " *", "")
	return

#deffunc EnableBox str prm_message
	objprm BoxInfo(1), prm_message	// クリア (理由を表示)
	Settitle "編集不可(Enable)"
	EnableWindow BoxInfo, false	// 無効化
	bEnable  = true
	filepath = ""
	return
