// ユーザ定義命令・関数をリストアップ

#packopt name "deflister.exe"
#packopt hide    1
#packopt orgpath 1

#runtime "hsp3mt"

	#define global __LISTUP_INCLUDE__
	#define global __LV_CUSTOMDRAW__

#include "hsedsdk.as"
#include "Mo/DialogEx.as"
#include "Mo/flexFrame.as"
#include "Mo/GetFontOfHSP.as"
#include "Mo/IsMouseButtonSwapped.as"
#include "Mo/SysCursor.as"
#include "Mo/Lvmod.as"
#include "Mo/mutex.as"

#include "mod_deflist.as"
#include "deflister.as"

//##################################################################################################
//        メイン・ルーチン
//##################################################################################################
*main
	gosub *Initialize		// 初期化
	gosub *ProcCmdline		// コマンドラインを処理する
	gosub *ClearVariable	// 変数の初期化
	gosub *SetWindow		// スクリーンを作成
	
	gosub *GetTargetFilePath	// 対象ファイルのパスを取得
	gosub *UpdateDefinitionList	// 定義リストの更新
	gosub *UpdateListview		// リストビューの更新
	
	gsel wID_Main
		oncmd gosub *OnSize       , 0x0005		// WM_SIZE        (サイズが変更された)
		oncmd gosub *OnSizing     , 0x0214		// WM_SIZING      (サイズが変更されている)
		oncmd gosub *OnNotify     , 0x004E		// WM_NOTIFY
		oncmd gosub *OnMouseMove  , 0x0200		// WM_MOUSEMOVE   (マウスが動いた)
		oncmd gosub *OnLBtnDown   , 0x0201		// WM_LBUTTONDOWN
		oncmd gosub *OnSplitterMove, UWM_SPLITTERMOVE
		
		oncmd gosub *OnAlreadyUsed, UWM_ALREADY_USED	// 二重起動された
		
	onexit  goto *exit		// 終了時
	onerror goto *error		// エラー発生時
	
	gsel wID_Main, 1
	stop
	
*exit
	gosub *SettleProgram
	oncmd   false
	onexit  false
	onerror false
	PostMessage hwnd, 0x0010, 0, 0
	return
	
// エラー発生時
*error
	onerror false		// 無限割り込みを防ぐ
	gosub *SettleProgram
	end : end
	
// 後始末
*SettleProgram
	DeleteFont hFont
	CloseMutex
	if ( peek(curdir) ) { chdir curdir }						// カレントポジションを起動時のモノに戻す
	if ( bDragging )    { ClipCursor NULL : bDragging = false }	// マウスの移動範囲を解放する
	if ( bHsed )        { exdel HSED_TEMPFILE }					// 一時ファイルの削除
	return
	
//##################################################################################################
//        Message Handler
//##################################################################################################
// 二重起動が発生した
*OnAlreadyUsed
	gsel wID_Main, 2
	gsel wID_Main, 1
	return
	
// ウィンドウのサイズが変わった
*OnSize
	MoveWindow infScript, 5,  5             , ginfo(12) - 10, EditHeight, true
	MoveWindow infLv,     5, 10 + EditHeight, ginfo(12) - 10, ginfo(13) - (EditHeight + 30 + 20), true
	
	repeat length2(infBtns)
		MoveWindow infBtns(0, cnt), ginfo(12) - (85 * (cnt + 1)), ginfo(13) - 30, 80, 25, true
	loop
	return
	
// サイズが変更されている
*OnSizing
	OnSizingToFlexFrame 240, 200
	return
	
// コントロールの割り込み
*OnNotify
	dupptr nmhdr, lparam, 12
	
	if ( nmhdr(0) == infLv ) {
		
#ifdef __LV_CUSTOMDRAW__
		// NM_CUSTOMDRAW (これはカスタムドローの処理)
		if ( nmhdr(2) == -12 ) {
			
			if ( LvIsCustom( mLv ) ) {
				dupptr NMLVCUSTOMDRAW, lparam, 60		// NMLVCUSTOMDRAW 構造体
				
				if ( NMLVCUSTOMDRAW(3) == 0x0001 ) {	// CDDS_REPAINT (描画サイクルの前)
					return 0x0020						// CDRF_NOTIFYITEMDRAW (アイテムの描画処理を親に通知)
				}
				
				if ( NMLVCUSTOMDRAW(3) == 0x10001 ) {	// CDDS_ITEMREPAINT (描画前)
					NMLVCUSTOMDRAW(12) = LvTextColor(mLv, NMLVCUSTOMDRAW(9))	// 文字色
					NMLVCUSTOMDRAW(13) = LvBackColor(mLv, NMLVCUSTOMDRAW(9))	// 背景色
					return 0x0002
				}
			}
		}
#endif
		// カラムがクリックされた
		if ( nmhdr(2) == 0xFFFFFF94 ) {	// LVN_COLUMNCLICK
			dupptr   NMLISTVIEW, lparam, 12 + 32		// NMLISTVIEW 構造体
			lviCol = NMLISTVIEW(4)						// クリックされたカラムのインデックス
			if ( lviCol == lvSortcol ) {				// マークつきカラムなら
				lvSortdir *= -1								// 逆向きにする
			} else {									// 違ったら
				lvSortdir = 1								// 正方向に向かせる
			}
			// アイコンを設定( ソートされる )
			lvSortcol = lviCol
			LvSetSortMark mLv, lvSortcol, lvSortdir
			
		// 項目の状態が変わった
		} else : if ( nmhdr(2) == -101 ) {			// LVN_ITEMCHANGED
			dupptr NMLISTVIEW, lparam, 12 + 32			// NMLISTVIEW 構造体
			iLv  = NMLISTVIEW(3)						// NMLISTVIEW::iItem
			if ( NMLISTVIEW(5) & 0x02 ) {				// NMLISTVIEW::uNewState & LVIS_SELECTED
				gosub *LvSelectedIdent					// 選択された
			}
			
		// 項目がアクティブ化した( Enter やＷクリック )
		} else : if ( nmhdr(2) == -114 ) {			// LVN_ITEMACTIVATE
			if ( bHsed ) { gosub *BtnJump }
		}
	}
	return
	
//##################################################################################################
//        サブ・ルーチン
//##################################################################################################
*Initialize
	gsel 0, -1
	
	// カレントディレクトリを取得する
	sdim curdir, MAX_PATH
	curdir = dirinfo(0)
	
	// 一意な文字列メッセージを作成しておく
	UWM_ALREADY_USED = RegisterWindowMessage("deflister_UWM_ALREADY_USED")
	
	// 二重起動を防ぐ
	if ( IsUsedByMutex("DEFLISTER_MUTEX") ) {
		sendmsg 0xFFFF, UWM_ALREADY_USED	// 二重起動が発生したことを知らせる
		end : end							// 強制終了
	}
	
	// マウス反転を取得
	CheckMouseButton
	return
	
// コマンドラインを処理する
*ProcCmdline
	sdim cmdline, MAX_PATH
	cmdline = dirinfo(4)
	cmdline = "hsed"
	
	if ( strmid(cmdline, 0, 4) == "hsed" ) {
		// hsed からの外部ツール呼び出し
		bHsed = true
		
		// hsed があるかチェック
		hsed_exist
		if ( stat == false ) { dialog "外部エラー\nhsed3.exe が起動されていません。", 1, "deflister" : end }
		
	} else : if ( peek(cmdline) == 0 ) {
		// 通常の起動
		FileSelDlg "HSP3 Script File (*.hsp;*.as)@*.hsp;*.as;hsptmp@@", NULL, false, OFN_HIDEREADONLY | OFN_NOCHANGEDIR | OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST | OFN_NONETWORKBUTTON
;		dialog "hsp;*.as", 16, "HSP3 Script File"
		if ( stat == 0 ) { end }
		cmdline = refstr
		
	} else {
		// DOSからの引数付き呼び出し
		if ( peek( cmdline ) == '"' ) {			// ホントは空白入りパスなんて無視してやりたいが……
			getstr cmdline, cmdline, 1, '"'
		}
		exist cmdline
		if ( strsize < 0 ) { dialog "外部エラー\n指定されたファイルがありません。", 1, "deflister" : end }
	}
	
	return
	
// 変数の初期化
*ClearVariable
	dim  rc, 4
	dim  infScript, 2
	dim  infBtns, 2, 2			// 各種ボタン
	dim  infLv, 2
	dim  iLv
	dim  iDL					// Index of Definition List
	EditHeight = 100
	
	sdim script, 0x1FFFF		// スクリプト
	dim  deflistLn				// 定義がある行番号
	sdim deflistIdent			// 定義される識別子
	dim  deflistType			// 定義される種類
	sdim deflistScope			// 定義されるスコープ
	dim  deflistCount			// 定義の数
	sdim stype
	sdim filepath, MAX_PATH
	sdim filename, MAX_PATH
	
#ifdef __LISTUP_INCLUDE__
	if ( bHsed ) { gosub *GetCommonPath }
#endif
	
	return
	
// ウィンドウの準備
*SetWindow
	screen wID_Main, ginfo(20), ginfo(21), 2 + 8,,, 380, 360
		title "deflister"
		SetStyle hwnd, -16, 0x40000		// 可変枠
		syscolor 15 : boxf : color
		
		// エディットボックス
		font "MS Gothic", 12
		objmode 2
		pos 5, 5 : mesbox script, ginfo(20), EditHeight, 4 : infScript = objinfo(stat, 2), stat
		
		tabstops = (12 / 4) * 4
		sendmsg infScript, 0x00CB, 1, varptr(tabstops)	// EM_SETTABSTOPS
		objmode 1
		
		// リストビュー
		CreateListview mLv, ginfo(20), ginfo(21), 0x0001 | 0x0004 | 0x0008 | 0x8000
		infLv = objinfo(stat, 2), stat
		
		gosub *LvInitialize
		
		// ボタン
		objsize 80, 25
		button gosub "移動", *BtnJump  : infBtns(0, 0) = objinfo(stat, 2), stat : EnableWindow infBtns(0, 0), bHsed
		button gosub "更新", *BtnRenew : infBtns(0, 1) = objinfo(stat, 2), stat
		
		gosub *OnSize
		
	return
	
// リストビューを初期化
*LvInitialize
	SetStyle   infLv, -20, 0x0200		// 枠
	LvSetExStyle mLv, 0x0001 | 0x0020
	
	// カラムを追加
	LvInsertColumn mLv, "行",       0, 0, 0
	LvInsertColumn mLv, "識別子",   1, 0, 1
	LvInsertColumn mLv, "種類",     2, 0, 2
	LvInsertColumn mLv, "範囲",     3, 0, 3
	LvInsertColumn mLv, "ファイル", 4, 0, 4
	
	// ▲▼マークを表示
;	LvSetSortMark mLv, 0, 1
;	lvSortdir = 1
;	lvSortcol = 0
	
	// フォントの変更
	ChangeControlFont infLv, "MS Gothic", 13
	hFont = stat
	
#ifdef __LV_CUSTOMDRAW__
	LvUseCustomMode mLv		// カスタムドローをする
#endif
	
	return
	
// 識別子が選択された( iLv は与えられる )
*LvSelectedIdent
	if ( numrg(iLv, 0, DefList_GetCount(mdeflist(iDL)) - 1 ) == false ) { return }
	
	// 位置を保存
	posLn = DefList_GetLn( mdeflist(iDL), iLv )
	
	// スクロールする
	ScrollWindow infScript, 1, limit(posLn - 1, 0, MAX_INT)		// SB_VERT
	return
	
// common フォルダのフルパスを取得
*GetCommonPath
#ifdef __LISTUP_INCLUDE__
	if ( bHsed ) {
		// hsed のフルパスに common をくっつける
		AppendSearchPath getpath(hsed_GetHsedPath(), 32) +"common"
	}
#endif
	return
	
// 対象のスクリプトのパスを取得する
*GetTargetFilePath
	if ( bHsed ) {
		hsed_GetActText                script		// アクティブな Footy のテキストを取得
		bsave           HSED_TEMPFILE, script		// 一時ファイルを作る
		GetFullPathName HSED_TEMPFILE, filepath		// フルパスとして取得する
	} else {
		GetFullPathName cmdline, filepath	// フルパスとして取得する
	}
	
	return
	
// 定義リストを更新する
*UpdateDefinitionList
	
#ifdef __LISTUP_INCLUDE__
	// 検索パスに追加
	AppendSearchPath getpath(filepath, 32)
	
	// 再帰的に定義リストを作成
	CreateDefinitionList mdeflist, filepath
#else
	// 定義リストを作成する
	newmod mdeflist, deflist, filepath
#endif
	
	gosub *ResetScriptBox
	
	// 位置を設定
	posLn = 0
	return
	
// スクリプトを更新する
*ResetScriptBox
	DefList_GetScript mdeflist(iDL), script
	
	// 行番号を埋め込む
	SetLinenum script, script, "%3d "
	
	// スクリプトを更新
	objprm infScript(1), script
	return
	
// リストをリセットする
*ResetListview
	sendmsg infLv, 0x000B, false, 0		// WM_SETREDRAW
	
	// すべて除去
	LvDeleteAll mLv
	
	return
	
// リストを更新する
*UpdateListview
	
#ifdef __LISTUP_INCLUDE__
	old_iDL = iDL
	foreach mdeflist
		iDL = cnt
#endif
	
	// 項目をすべて追加
	filename     = DefList_GetFileName( mdeflist(iDL) )
	deflistCount = DefList_GetCount   ( mdeflist(iDL) )
	
	if ( deflistCount <= 0 ) { return }
	
	sendmsg infLv, 0x000B, false, 0		// WM_SETREDRAW
	
	repeat deflistCount
		DefList_Get mdeflist(iDL), cnt, deflistIdent, deflistLn, deflistType, deflistScope
		stype = MakeTypeString( deflistType )
		
		LvInsertItem  mLv, strf("%d", deflistLn) : iLvItem = stat
		LvSetSub      mLv, deflistIdent, iLvItem, 1
		LvSetSub      mLv,        stype, iLvItem, 2
		LvSetSub      mLv, deflistScope, iLvItem, 3
		LvSetSub      mLv,     filename, iLvItem, 4
	loop
	
#ifdef __LISTUP_INCLUDE__
	loop
	iDL = old_iDL
#endif
	
#ifdef __LV_CUSTOMDRAW__
	sendmsg infLv, 0x1004, 0, 0		// LVM_GETITEMCOUNT
	repeat stat
		LvCtTextColor mLv, cnt, 0x000000
		LvCtBackColor mLv, cnt, cwhich_int(cnt & 1, 0xFFF2F2, 0xF2F2FF)
	loop
#endif
	
	// カラムの幅を適正にする
	repeat 5
		sendmsg infLv, 0x101E, cnt, -2	// LVM_SETCOLUMNWIDTH::lp = LVSCW_AUTOSIZE_USEHEADER
	loop
	
	sendmsg infLv, 0x000B, true, 0		// WM_SETREDRAW
	return
	
// ジャンプする
*BtnJump
	if ( bHsed == false ) {
		dialog "hsed3 からの呼び出しではありません。", 1, "deflister"
		return
	}
	
#ifdef __LISTUP_INCLUDE__
	// 他のファイルならだめ
	if ( DefList_GetFileName( deflist(iDL) ) != HSED_TEMPFILE ) {
		dialog "include 先のファイルにはジャンプできません。", 1, "deflister"
		return
	}
#endif
	
	gsel wID_Main, -1	// 動きが俊敏なように見せる
	
	// 指定行に移動( hsed の行番号は１ベース )
	hsed_setcaretline hsed_activeFootyID(), DefList_GetLn( mdeflist(iDL), iLv ) + 1
	
	// 終了する
	PostMessage hwnd, 0x0010, 0, 0
	return
	
// 更新する
*BtnRenew
	delmodall mdeflist
	
	gosub *ResetListview
	gosub *GetTargetFilePath
	gosub *UpdateDefinitionList
	gosub *UpdateListview
	return
	
//##############################################################################
//        マウスＤ＆Ｄ関係
//##############################################################################
// マウスが仮想スプリッター上を動いた
*OnMouseMove
	if ( boxin( 5, 5 + EditHeight, ginfo(12) - 10, 10 + EditHeight, mousex2, mousey2 ) ) {
		SetCursor LoadCursor(IDC_SIZENS)	// 上下
	}
	return
	
// ドラッグ開始
*OnLBtnDown
	if ( boxin( 5, 5 + EditHeight, ginfo(12) - 10, 10 + EditHeight, mousex2, mousey2 ) ) {
		// 開始時の位置を記憶する
		bDragging   = true					// ドラッグ開始フラッグ
		ptDragStart = ginfo(0), ginfo(1)	// 位置を記憶する
		
		// マウスの移動範囲を制限する
		rc(0) = ginfo(4) + 10
		rc(1) = ginfo(5) + ( 10 + 60 )
		rc(2) = ginfo(6) - 10
		rc(3) = ginfo(7) - ( 40 + 80 )
		ClipCursor varptr(rc)
		
		// 無限ループ
		while
			getkey bLBtnDown, GETKEY_LBTN
			if ( bLBtnDown == false ) {
				_break
			}
			
			await 0
			
			// 変更し続ける
			SetCursor LoadCursor(IDC_SIZENS)
			
			ptDragEnd   = ginfo(0), ginfo(1)			// 位置を記憶する
			sendmsg hwnd, UWM_SPLITTERMOVE, 0, 0		// 通知する
			ptDragStart = ptDragEnd(0), ptDragEnd(1)	// 始点を変更する
			
		wend
		
		// ドロップされた
		if ( bDragging ) {			// ドロップ
			ClipCursor NULL							// 移動制限を解放
			bDragging = false						// 終了
			ptDragEnd = ginfo(0), ginfo(1)			// 位置を記憶する
			
			sendmsg hwnd, UWM_SPLITTERMOVE, 0, 0	// 終了を通知する
		}
	}
	return
	
// 仮想スプリッタが動いた
*OnSplitterMove
	EditHeight += ptDragEnd(1) - ptDragStart(1)		// 変わる
	
	gosub *OnSize
	return
	