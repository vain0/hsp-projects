// ユーザ定義命令・関数をリストアップ

#packopt name "deflister.exe"
#packopt hide 1

#include "hsedsdk.as"
#include "dll/ODListbox/ODListbox.as"
#include "Mo/flexFrame.as"
#include "Mo/GetFontOfHSP.as"
#include "Mo/IsMouseButtonSwapped.as"
#include "Mo/SysCursor.as"

#include "deflister.as"

//##################################################################################################
//        メイン・ルーチン
//##################################################################################################
*main
	gosub *Initialize		// 初期化
	gosub *ProcCmdline		// コマンドラインを処理する
	gosub *ClearVariable	// 変数の初期化
	gosub *SetWindow		// スクリーンを作成
	
	gosub *GetTargetScript		// 対象スクリプトを取得
	gosub *UpdateDefinitionList	// アップデート
	
	gsel wID_Main
		oncmd gosub *OnSize       , 0x0005		// WM_SIZE        (サイズが変更された)
		oncmd gosub *OnSizing     , 0x0214		// WM_SIZING      (サイズが変更されている)
		oncmd gosub *OnCommand    , 0x0111		// WM_COMMAND
		oncmd gosub *OnMouseMove  , 0x0200		// WM_MOUSEMOVE   (マウスが動いた)
		oncmd gosub *OnLBtnDown   , 0x0201		// WM_LBUTTONDOWN
		oncmd gosub *OnSplitterMove, UWM_SPLITTERMOVE
		if ( bODLb ) {
			oncmd gosub *OnDrawItem   , 0x002B	// WM_DRAWITEM    (オーナー描画の項目を描画するように要求)
			oncmd gosub *OnMeasureItem, 0x002C	// WM_MEASUREITEM (オーナー描画の項目のサイズを設定・確認するよう要求)
		}
		
	onexit gosub *exit		// 終了時
	
	gsel wID_Main, 1
	stop
	
*exit
	if ( bODLb ) { ODLbDestroy lbID }
	DeleteFont  hFont
	
	oncmd   false
	onexit  false
	onerror false
	PostMessage hwnd, 0x0010, 0, 0
	return
	
//##################################################################################################
//        Message Handler
//##################################################################################################
// ウィンドウのサイズが変わった
*OnSize
	MoveWindow infScript, 5,  5             , ginfo(12) - 10, EditHeight, true
	MoveWindow hLb,       5, 10 + EditHeight, ginfo(12) - 10, ginfo(13) - (EditHeight + 30 + 10), true
	
	repeat length2(infBtns)
		MoveWindow infBtns(0, cnt), ginfo(12) - (85 * (cnt + 1)), ginfo(13) - 30, 80, 25, true
	loop
	return
	
// サイズが変更されている
*OnSizing
	OnSizingToFlexFrame 240, 200
	return
	
// ODLb のメッセージ
*OnDrawItem
*OnMeasureItem
	if ( bODLb ) {
		ODLbProc lbID, iparam, wparam, lparam
		return stat
	}
	return
	
// コマンド割り込み
*OnCommand
	if ( lparam == hLb ) {
		switch HIWORD(wparam)
		case 1					// LBN_SELCHANGE
		case 2					// LBN_DBLCLICK
			// Listbox の index を取得
			sendmsg hLb, 0x0188, 0, 0		// LB_GETCURSEL ( 選択項目のインデックスを取得 )
			iLb = stat
			if ( numrg(iLb, 0, deflistCount) == false ) { return }
			
			// 位置を保存
			posLineNum = deflistLineNum(iLb)
			
			// スクロールする
			ScrollWindow infScript, 1, limit(posLineNum - 1, 0, 0x7FFFFFFF)		// SB_VERT
			
			// ダブルクリックなら、jump
			if ( bHsed && ( HIWORD(wparam) == 2 ) ) {
				gosub *BtnJump
			}
			swbreak
		swend
	}
	return
	
// マウスが仮想スプリッター上を動いた
*OnMouseMove
	if ( boxin( 5, 5 + EditHeight, ginfo(12) - 10, 10 + EditHeight, mousex2, mousey2 ) ) {
		SetCursor LoadCursor(IDC_SIZENS)	// 上下
	}
	return
	
// ドラッグ開始
*OnLBtnDown
	if ( boxin( 5, 5 + EditHeight, ginfo(12) - 10, 10 + EditHeight, mousex2, mousey2 ) ) {
		bDragging   = true					// ドラッグ開始フラッグ
		ptDragStart = ginfo(0), ginfo(1)	// 位置を記憶する
		
		// 無限ループ
		while
			
			getkey bLBtnDown, GETKEY_LBTN
			if ( bLBtnDown == false ) {
				_break
			}
			
			// 変更し続ける
			SetCursor LoadCursor(IDC_SIZENS)
			
			ptDragEnd   = ginfo(0), ginfo(1)			// 位置を記憶する
			sendmsg hwnd, UWM_SPLITTERMOVE, 0, 0		// 通知する
			ptDragStart = ptDragEnd(0), ptDragEnd(1)	// 始点を変更する
			
			await 0
			
		wend
		
		// ドロップされた
		if ( bDragging ) {			// ドロップ
			bDragging = false						// 終了
			ptDragEnd = ginfo(0), ginfo(1)			// 位置を記憶する
			
			sendmsg hwnd, UWM_SPLITTERMOVE, 0, 0	// 終了を通知する
		}
	}
	return
	
// 仮想スプリッタが動いた
*OnSplitterMove
	EditHeight += ptDragEnd(1) - ptDragStart(1)		// 変わる
	
	if ( EditHeight < 60 ) {
		EditHeight =  60
		mouse , ginfo(5) + (ginfo(11) - ginfo(13)) + 5 + EditHeight + 2
	} else : if ( (ginfo(13) - 80) < EditHeight ) {
		EditHeight = ginfo(13) - 80
		mouse , ginfo(5) + (ginfo(11) - ginfo(13)) + 5 + EditHeight + 2
	}
	
	gosub *OnSize
	return
	
//##################################################################################################
//        サブ・ルーチン
//##################################################################################################
*Initialize
	gsel 0, -1
	
	// マウス反転を取得
	CheckMouseButton
	
	// ODLb があるかどうか
	exist "ODListbox.dll"
	bODLb = ( strsize > 0 )
	return
	
// コマンドラインを処理する
*ProcCmdline
	cmdline = dirinfo(4)
	
	if ( peek(cmdline) == 0 ) {
		// 通常の起動
		dialog "hsp;*.as;hsptmp", 16, "HSP3 Script File"
		if ( stat == 0 ) { end }
		cmdline = refstr
		
	} else : if ( strmid(cmdline, 0, 4) == "hsed" ) {
		// hsed からの外部ツール呼び出し
		bHsed = true
		
	} else {
		// DOS 窓からの引数付き呼び出し
		if ( peek( cmdline ) == '"' ) {			// ホントは空白入りパスなんて無視してやりたいが……
			getstr cmdline, cmdline, 1, '"'
		}
		exist cmdline
		if ( strsize < 0 ) { dialog "外部エラー\n指定されたファイルがありません。", 1, "deflister" : end }
	}
	
	if ( bHsed ) {
		// hsed があるかチェック
		hsed_exist
		if ( stat == false ) { dialog "外部エラー\nhsed3.exe が起動されていません。", 1, "deflister" : end }
	}
	return
	
// 変数の初期化
*ClearVariable
	dim  scrollinfo, 8			// SCROLLINFO 構造体
	dim  infScript, 2
	dim  infBtns, 2, 2			// 各種ボタン
	dim  hLb
	dim  lbID
	dim  iLb
	EditHeight = 100
	
	sdim script, 0x3FFFF		// スクリプト
	sdim deflistNames			// 定義される名称のリスト
	dim  deflistLineNum			// 定義がある行番号のリスト
	dim  deflistCount			// 定義の数
	return
	
// ウィンドウの準備
*SetWindow
	screen wID_Main, ginfo(20), ginfo(21), 2 + 8,,, 320, 360
		title "deflister"
		SetStyle hwnd, -16, 0x40000		// 可変枠
		syscolor 15 : boxf : color
		
		// エディットボックス
		font "MS Gothic", 12
		objmode 2
		pos 5, 5 : mesbox script, ginfo(20), EditHeight, 4 : infScript = objinfo(stat, 2), stat
		
		tabstops = (12 / 4) * 4
		sendmsg infScript, 0x00CB, 1, varptr(tabstops)	// EM_SETTABSTOPS
		sendmsg
		objmode 1
		
		// リストボックス
		hFont = CreateFontByHSP("Fixedsys", 14)
		
		if ( bODLb ) {
			ODLbCreate hwnd, 5, 10 + EditHeight, ginfo(20), ginfo(21)
			lbID  = stat
			hLb   = ODLbGetHandle( lbID )
			ODLbSetFont        lbID, hFont			// フォント変更
			ODLbSetItemHeight  lbID, 20				// 項目の高さを一括変更
			ODLbSetItemMargin  lbID, 1				// この命令を使う場合は、必ず ODLbSetItemHeight を呼び出しておくこと！
			ODLbSetMarginColor lbID, , 0xFFEEEE		// 基本マージン色を設定する
		} else {
			pos 5, 85 : listbox iLb, 0, ""
			lbID = stat
			hLb  = objinfo(stat, 2)
			sendmsg hLb, 0x0030, hFont, false
		}
		
		// ボタン
		objsize 80, 25
		button gosub "移動", *BtnJump  : infBtns(0, 0) = objinfo(stat, 2), stat : EnableWindow infBtns(0, 0), bHsed
		button gosub "更新", *BtnRenew : infBtns(0, 1) = objinfo(stat, 2), stat : EnableWindow infBtns(0, 1), bHsed
		
		gosub *OnSize
		
	return
	
// 対象のスクリプトを取得する
*GetTargetScript
	if ( bHsed ) {
		hsed_GetActText script		// アクティブな Footy のテキストを取得
	} else {
		exist cmdline
		memexpand      script, strsize + 1
		bload cmdline, script, strsize	// ファイルから取り出す
	}
	
	// 定義をリストアップする
	TookDefinition deflistNames, deflistLineNum, script
	deflistCount = stat
	
	// 行番号を埋め込む
	SetLineNum script, script, "%3d "
	
	// スクリプトを更新
	objprm infScript(1), script
	
	// 位置を設定
	posLineNum = deflistLineNum(0)
	return
	
// リストをアップデートする
*UpdateDefinitionList
	sendmsg hLb, 0x000B, false, 0		// WM_SETREDRAW
	
	// すべて除去
	if ( bODLb ) {
		ODLbClearItem lbID
	} else {
		sendmsg hLb, 0x0184, 0, 0
	}
	
	NoteRepeat deflistNames
		if ( bODLb ) {
			ODLbInsertItem   lbID, note
			ODLbSetItemColor lbID, stat, 0x000000, cwhich_int(ntcnt & 1, 0xEEFFEE, 0xEEEEFF)
		} else {
			sendmsg hLb, 0x0180, 0, note
		}
	NoteLoop
	
	sendmsg hLb, 0x000B, true, 0		// WM_SETREDRAW
	return
	
// ジャンプする
*BtnJump
	if ( bHsed == false ) {
		dialog "hsed3 からの呼び出しではありません。", 1, "deflister"
		return
	}
	
	gsel wID_Main, -1	// 動きが俊敏なように見せる
	
	// 指定行に移動
	hsed_setcaretline hsed_activeFootyID(), deflistLineNum( iLb ) + 1	// hsed の行番号は１ベース
	
	// 終了する
	PostMessage hwnd, 0x0010, 0, 0
	return
	
// 更新する
*BtnRenew
	gosub *GetTargetScript
	gosub *UpdateDefinitionList
	return
	