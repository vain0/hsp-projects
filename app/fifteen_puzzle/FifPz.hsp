// FifPz

#packopt name "FifPz"
#packopt hide    true
#packopt orgpath true

#include "Mo/CreateChildWindow.as"
#include "Mo/MCKeyboard.as"
#include "Mo/MenuBarAPI.as"

	goto *main

#include "FifPz.as"
#include "Sub_Control.hsp"
#include "Sub_Function.hsp"

//##############################################################################
//        メインルーチン
//##############################################################################
*main
	gosub *LInitialize
	goto  *mainlp
	
//*--------------------------------------------------------*
//        メインループ
//*--------------------------------------------------------*
*mainlp
	gosub *LCmd_KeyCheck	// ショートカットキー・チェック
	
	if ( bPlaying ) {
		gosub *LCheckKeyEvent		// キーイベント
	}
	await 64
	goto *mainlp
	
//##############################################################################
//        サブルーチン群
//##############################################################################

//*--------------------------------------------------------*
//        初期化サブルーチン
//*--------------------------------------------------------*
*LInitialize
	randomize
	gsel 0, -1
	
	gosub *LClearVariable
	gosub *LSetWindow
	gosub *LSetInterrupt
	
	gsel IDW_MAIN, 1
	return
	
// 変数を初期状態にセットする
*LClearVariable
	sdim filepath, MAX_PATH
	dim  sizePicFull,  2
	dim  sizePicShard, 2
	dim  placePics
	
	bPlaying      = false			// ゲーム中か
	id_cntShards  = 2				// 断片数コンボボックスの番号
	cntShardsRoot = 4				// 断片数のルート
	cntShards     = cntShardsRoot * cntShardsRoot
	idxDisShard   = cntShards - 1	// 無効断片の位置
	dirExchange   = -1				// 無効断片の移動する方向
	crefDisShard  = RGB(0, 0, 0)	// 無効断片の色
	
	// 局所的なもの
	dim infCombox_ShardsNumber, 2
	
	newmod mKeybd, MCKeyboard		// キーボード状態
	
	return
	
// ウィンドウを初期状態にセットする
*LSetWindow
	screen IDW_MAIN, ginfo(20) * 2, ginfo(21) * 2, 2 + 16, (ginfo(20) - 360) / 2, (ginfo(21) - 300) / 2, 360, 300
	title "FifPz"
		gosub *LCreateMenuBar
		
	buffer IDW_PICFULL, 320, 320
	
	return
	
// 割り込みを設定する
*LSetInterrupt
	gsel IDW_MAIN
		oncmd gosub *OnCommand,   0x0111
		oncmd gosub *OnDropFiles, WM_DROPFILES
		
		DragAcceptFiles hwnd, true	// Ｄ＆Ｄ受付
		
	return
	
//*--------------------------------------------------------*
//        画像の設定・初期化
//*--------------------------------------------------------*

// 画像ファイルを開く
*LCmd_OpenPicfile
	dialog "jpg;*.bmp;*.gif", 16, "画像ファイル"
	if ( stat == 0 ) { return }
	filepath = refstr
	bPlaying = true
	
	gosub *LLoadPicfile	// 画像を読み込む
	gosub *LResetPic	// 断片の処理
	
	return
	
// 画像ファイルを読み込む
*LLoadPicfile
	gsel IDW_PICFULL
	picload filepath
	sizePicFull  = ginfo(12), ginfo(13)
	return
	
// 画像ファイルを閉じる
*LCmd_ClosePicfile
	if ( bPlaying ) {
		gsel IDW_MAIN : color 255, 255, 255 : boxf
		poke filepath
		bPlaying = false
	}
	return
	
// 画像を再設定する
*LResetPic
	gsel IDW_PICFULL
	sizePicShard.x = sizePicFull.x / cntShardsRoot	// 断片1つあたりの x サイズ
	sizePicShard.y = sizePicFull.y / cntShardsRoot	// 〃 y サイズ
	
	// 断片ごとに切り取る
	repeat cntShards
		buffer    IDW_PICSHARD_TOP + cnt, sizePicShard.x, sizePicShard.y
		copyShard IDW_PICFULL, cnt
	loop
	
	gosub *LReplaceShards	// 断片を再配置する
	gosub *LResetWindowSize	// ウィンドウをパズルの大きさに合わせる
	gosub *LRedrawPuzzle	// パズル部分を再描画する
	
	return
	
// 正解の配置
*LPlaceAnswerShards
	repeat cntShards - 1
		placePics(cnt) = cnt
	loop
	
	idxDisShard = cntShards - 1
	placePics(idxDisShard) = -1	// 無効断片の設定
	
	return
	
// ランダム再配置
*LReplaceShards
	dim placePics, cntShards
	
	// 昇順の配列を作成する
	gosub *LPlaceAnswerShards
	
	// 無効断片を適当に移動させる
	repeat 4
		repeat cntShards
			moveDisShard rnd(DIR_MAX)
		loop
	loop
	
	return
	
//*--------------------------------------------------------*
//        インターフェース部分
//*--------------------------------------------------------*
// パズル部分の再描画
*LRedrawPuzzle
	gsel IDW_MAIN
	redraw 2
	
	color 255, 255, 255 : boxf
	
	// パズル部分に断片をコピー ( 順番は placePics 参照 )
	repeat cntShards
		if ( placePics(cnt) < 0 ) {
			gosub *LPaintDisShard		// 無効断片の描画
		} else {
			pos posidToPos(cnt, x), posidToPos(cnt, y)
			copyShard IDW_PICSHARD_TOP + placePics(cnt)
		}
	loop
	
	redraw 1
	return
	
// ウィンドウを画像の大きさに合わせる
*LResetWindowSize
	gsel IDW_MAIN : width sizePicFull.x, sizePicFull.y + 20
	return
	
// 無効断片を塗りつぶす
*LPaintDisShard
	if ( bPlaying == false ) { return }
	
	gsel IDW_MAIN
	color32 crefDisShard
	px = posidToPos(idxDisShard, x)
	py = posidToPos(idxDisShard, y)
	boxf px, py, px + sizePicShard.x, py + sizePicShard.y
	return
	
// キーイベントを調べる
*LCheckKeyEvent
	
	stick keydown
	if ( keydown == 0 ) {
		return
	} else : if ( keydown & 1 ) { dirExchange = DIR_LEFT
	} else : if ( keydown & 2 ) { dirExchange = DIR_UPPER
	} else : if ( keydown & 4 ) { dirExchange = DIR_RIGHT
	} else : if ( keydown & 8 ) { dirExchange = DIR_LOWER }
	
	// 無効断片の周り4つを動かすように見せるため、キーと反対方向に無効断片を動かす
	if ( dirExchange >= 0 ) {
		dirExchange = ( dirExchange + DIR_MAX / 2 ) \ DIR_MAX
		gosub *LMoveDisShard
	}
	
	return
	
// ショートカットキー・チェック
*LCmd_KeyCheck
	
	KeyBd_check mKeybd
	
	if ( KeyBd_isPut(mKeybd, 17) ) {
		if ( false ) {
			return
		} else : if ( KeyBd_isPut(mKeybd, 'C') ) { gosub *LCmd_ClosePicfile
		} else : if ( KeyBd_isPut(mKeybd, 'O') ) { gosub *LCmd_OpenPicfile
		} else : if ( KeyBd_isPut(mKeybd, 'Q') ) { gosub *LCmd_Quit
		} else : if ( KeyBd_isPut(mKeybd, 'S') ) { gosub *LCmd_Shuffle
		} else : if ( KeyBd_isPut(mKeybd, 'A') ) { gosub *LCmd_PlaceAnswer
		}
	}
	return
	
// 無効断片を移動させる
*LMoveDisShard
	if ( dirExchange >= 0 ) {
		moveDisShard dirExchange
		gosub *LRedrawPuzzle
		dirExchange = -1
	}
	return
	
//*--------------------------------------------------------*
//        コマンド
//*--------------------------------------------------------*

// ランダム再配置のコマンド
*LCmd_Shuffle
	if ( bPlaying == false ) { return }
	gosub *LReplaceShards
	gosub *LRedrawPuzzle
	return
	
// 正解再配置のコマンド
*LCmd_PlaceAnswer
	if ( bPlaying == false ) { return }
	gosub *LPlaceAnswerShards
	gosub *LRedrawPuzzle
	return
	
// 無効断片の色を変える
*LCmd_ChangeColorDisShard
	dialog "", 33
	if ( stat == 0 ) { return }
	crefDisShard = RGB(ginfo_r, ginfo_g, ginfo_b)
	
	// 無効断片を塗り潰し直す
	gosub *LPaintDisShard
	return
	
// 終了コマンド
*LCmd_Quit
	gsel IDW_MAIN
	PostMessage hwnd, 0x0010, 0, 0
	return
	
//##############################################################################
//        ウィンドウメッセージ・ハンドラ
//##############################################################################

// WM_COMMAND
*OnCommand
	switch ( lparam )
		// メニューバー
		case NULL : gosub *OnCommand_MenuProc : swbreak
	swend
	return
	
// メニューのコマンド
*OnCommand_MenuProc
	cmd = LOWORD(wparam)
	
	switch ( cmd )
		case IDM_OPEN  : gosub *LCmd_OpenPicfile  : swbreak
		case IDM_CLOSE : gosub *LCmd_ClosePicfile : swbreak
		case IDM_QUIT  : gosub *LCmd_Quit         : swbreak
		
		case IDM_SHUFFLE         : gosub *LCmd_Shuffle     : swbreak
		case IDM_PLACE_ANS       : gosub *LCmd_PlaceAnswer : swbreak
		case IDM_CHGCLR_DISSHARD : gosub *LCmd_ChangeColorDisShard : swbreak
		
		default
			// 断片数の変更
			if ( numrg(cmd, IDM_SHARDS_NUMBER, IDM_SHARDS_NUMBER_END - 1) ) {
				cntShardsRoot = cmd - IDM_SHARDS_NUMBER + 2
				cntShards     = cntShardsRoot * cntShardsRoot
				
				SetRadioMenu hShardMenu, IDM_SHARDS_NUMBER, IDM_SHARDS_NUMBER_END, cntShardsRoot - 2
				
				if ( bPlaying ) {
					gosub *LResetPic
				}
			}
			swbreak
	swend
	return
	
// WM_DROPFILES
*OnDropFiles
	
	// ドロップされたファイルの数
	hDrop   = wparam                  // ドロップファイル情報のハンドル
	DragQueryFile hDrop, -1, 0, 0
	
	// ファイル名を取得して表示
	DragQueryFile hDrop, 0, varptr(filepath), MAX_PATH
	
	// ドロップファイル情報をクリア (メモリリーク防止)
	DragFinish hDrop
	
	// 読み込み後の処理
	bPlaying = true
	gosub *LLoadPicfile
	gosub *LResetPic
	
	return
	