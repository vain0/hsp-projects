#include "abtest_header.hsp"

#module
#deffunc list_logmes int self
	repeat list_size(self)
		logmes strf("#%04d::%d  =  %s", cnt, list_vartype(self, cnt), str(list_get(self, cnt)))
	loop
	return

#defcfunc list_make_iota int n,  \
	local self
	
	self = list_make()
	repeat n
		list_push_back self, cnt
	loop
	return self
#global

#module
#deffunc listTest_eq_ran var self, int _value, int sort_mode,  int x_lb, int x_ub, \
	local value, local lb, local ub
	
	value = _value
	list_equal_range self, value, lb, ub, sort_mode
	assert lb == x_lb
	assert ub == x_ub
	return
	
#deffunc listTest_sorted_insert var _self, int _value, int can_dup, int sort_mode, \
	int x_lb, int x_ub, \
	local self, local value, local lb, local ub
	
	self = list_make()
	list_copy self, _self
	value = _value
	list_sorted_insertv self, value, can_dup, sort_mode
	list_equal_range self, value, lb, ub,  sort_mode
	assert lb == x_lb
	assert ub == x_ub
	return
	
#deffunc listTest_sorted_erase var _self, int _value, int max_count, int sort_mode,  int x_lb, int x_ub, \
	local self, local value, local lb, local ub
	
	self = list_make()
	list_copy self, _self
	value = _value
	list_sorted_erasev  self, value, max_count, sort_mode
	list_equal_range self, value, lb, ub,    sort_mode
	assert lb == x_lb
	assert ub == x_ub
	return
	
#deffunc listTest_main

	randomize

	//構築テスト
	
	int_var = 0
	double_var = M_PI
	str_var = "list_test"
	
	list_new con0
	list_new con1, 1, double_var
	list_new con2, 7, str_var
	
	assert list_size(con0) == 0
	assert list_size(con1) == 1
	assert list_get(con1, cnt) == double_var
	assert list_size(con2) == 7
	repeat list_size(con2)
		assert list_get(con2, cnt) == str_var
	loop
	
	//要素追加
	
	//push_back
	list_new con, 3, str_var
	list_push_back con, M_PI
	assert list_size(con) == 4
	assert list_get(con, 3) == M_PI
	repeat 3
		assert list_get(con, cnt) == str_var
	loop
	list_delete con
	
	//push_front
	con = list_make_iota(4)
	list_push_front con, M_PI
	assert list_size(con) == 5
	assert list_get(con, 0) == M_PI
	repeat 4, 1
		assert list_get(con, cnt) == cnt - 1
	loop
	
	//insert mid
	con = list_make_iota(5)
	list_insert con, M_PI, 2
	assert list_size(con) == 6
	repeat 2
		assert list_get(con, cnt) == cnt
	loop
	assert list_get(con, 2) == M_PI
	repeat 3, 3
		assert list_get(con, cnt) == cnt - 1
	loop
	
	//insert after last
	con = list_make_iota(3)
	list_insert con, 7, 7
	assert list_size(con) == 8
	repeat 8
		if ( cnt < 3 || cnt == 7 ) {
			assert list_get(con, cnt) == cnt
		} else {
			assert list_get(con, cnt) == defvar@__abdata
		}
	loop
	
	//サイズ指定
	
	//to extend
	con = list_make_iota(3)
	list_resize con, 5, str_var
	assert list_size(con) == 5
	repeat 5
		if ( cnt < 3 ) {
			assert list_get(con, cnt) == cnt
		} else {
			assert list_get(con, cnt) == str_var
		}
	loop
	
	//to truncate
	con = list_make_iota(5)
	list_resize con, 2
	assert list_size(con) == 2
	repeat 2
		assert list_get(con, cnt) == cnt
	loop
	
	//除去
	con = list_make_iota(4)
	list_erase con, 2
	assert list_size(con) == 4 - 1
	
	expected = 0, 1, 3
	repeat 3
		assert list_get(con, cnt) == expected(cnt)
	loop
	
	//参照化
	declvar r
	con = list_make_iota(4)
	list_dup con, r, -2
	assert r == 2
	r = 99
	assert list_get(con, 2) == 99
	
	con = list_make_iota(3)
	list_ref(con, -1) ++
	assert list_get(con, 2) == 3
	
	//書き換え
	con = list_make_iota(4)
	list_set con, str_var, 2
	assert list_size(con) == 4
	assert list_get(con, 0) == 0
	assert list_get(con, 1) == 1
	assert list_get(con, 2) == str_var
	assert list_get(con, 3) == 3
	
	//移動
	con = list_make_iota(4)
	list_iter_move con, -3, -1
	expected = 0, 2, 3, 1
	assert list_compare(con, list_from_array(expected, 4)) == 0
	
	//交換、反転
	//arrlen をラップしただけなので省略
	
	//消去
	con = list_make_iota(3)
	list_clear con
	assert list_size(con) == 0
	
	//連結
	con0 = list_make_iota(3)
	con1 = list_make_iota(4)
	list_chain con0, con1
	assert list_size(con0) == 3+4
	repeat 3
		assert list_get(con0, cnt) == cnt
	loop
	repeat 4
		assert list_get(con0, 3 + cnt) == list_get(con1, cnt)
	loop
	
	//整列
	
	//長さ0
	con0 = list_make_iota(0)
	list_sort con0
	assert list_size(con0) == 0
	
	//乱数
	con1 = list_make(5)
	repeat list_size(con1)
		list_set con1, rnd(1000), cnt
	loop
	list_sort con1
	assert list_size(con1) == 5
	repeat list_size(con1) - 1
		assert list_get(con1, cnt) <= list_get(con1, cnt + 1)
	loop
	
	//インデックスソート
	declvar perm
	con0 = list_make_iota(10)
	list_reverse con0
	list_ix_sort con0, perm
	repeat 10
		assert perm(cnt) == 10 - cnt - 1
	loop
	
	//shuffle
	// iota の攪乱順列になっていることを確認
	con0 = list_make_iota(10)
	list_shuffle con0
	assert list_size(con0) == 10
	list_sort con0
	assert list_compare(con0, list_make_iota(10)) == 0
	
	//permutate
	repeat 3
		// 無作為な順列を生成
		con0 = list_make_iota(10)
		list_shuffle con0
		repeat 10
			perm(cnt) = list_get(con0, cnt)
		loop
		
		con1 = list_make_iota(10)
		list_permutate con1, perm
		assert list_compare(con0, con1) == 0
	loop
	
	//複数の型
	con2 = list_make()
	list_push_back con2, "b"
	list_push_back con2, 5
	list_push_back con2, 1
	list_push_back con2, "a"
	list_sort con2
	assert list_get(con2, 0) == "a"
	assert list_get(con2, 1) == "b"
	assert list_get(con2, 2) == 1
	assert list_get(con2, 3) == 5
	
	//数え上げ
	con = list_make()
	list_push_back con, "1"
	list_push_back con, "a"
	list_push_back con, 1
	list_push_back con, 4
	assert list_count(con, ref_xi(1)) == 1
	assert list_count(con, defvar@__abdata) == 0
	
	//辞書順比較
	con1 = list_make_iota(4)
	con2 = list_make_iota(4)
	con3 = list_make_iota(5)
	list_set con2, ".", 1
	assert list_compare(con1, con1) == 0
	assert list_compare(con1, con2) > 0
	assert list_compare(con2, con3) < 0
	assert list_compare(con3, con2) > 0
	
	//複写
	con1 = list_make_iota(3)
	con2 = list_make()
	list_copy con2, con1
	assert list_compare(con2, con1) == 0
	
	//整列済みか
	con = list_make_iota(3)
	assert list_is_sorted(con, abdata_sort_ascending)
	
	list_reverse con
	assert list_is_sorted(con, abdata_sort_decending)
	
	list_set con, 99, 2
	assert list_is_sorted(con, abdata_sort_ascending) == 0
	assert list_is_sorted(con, abdata_sort_decending) == 0
	
	//下界、上界
	expected = 1, 3, 3, 5, 5, 5, 7, 8
	con1 = list_from_array(expected, 8)
	
	//検索
	listTest_eq_ran con1, 0,,   0, 0
	listTest_eq_ran con1, 2,,   1, 1
	listTest_eq_ran con1, 3,,   1, 3
	listTest_eq_ran con1, 8,,   7, 8
	listTest_eq_ran con1, 9,,   8, 8
	
	//整列済み挿入
	//挿入後に、挿入した値の equal_range がどうなるか
	listTest_sorted_insert con1, 0,  true,,    0, 1
	listTest_sorted_insert con1, 1,  true,,    0, 2
	listTest_sorted_insert con1, 1, false,,    0, 1
	listTest_sorted_insert con1, 2,  true,,    1, 2
	listTest_sorted_insert con1, 3,  true,,    1, 4
	listTest_sorted_insert con1, 3, false,,    1, 3
	listTest_sorted_insert con1, 9,  true,,    8, 9
	listTest_sorted_insert con1, 9, false,,    8, 9
	
	//整列済みの除去
	//除去後に、除去された値の equal_range がどうなるか
	listTest_sorted_erase con1, 0,  1,,    0, 0
	listTest_sorted_erase con1, 1,  1,,    0, 0
	listTest_sorted_erase con1, 3,  1,,    1, 2
	listTest_sorted_erase con1, 3, 99,,    1, 1
	listTest_sorted_erase con1, 9, 99,,    8, 8
	
	con2 = list_make()
	list_chain   con2, con1
	list_reverse con2 //8, 7, 5, 5, 5, 3, 3, 1
	
	listTest_eq_ran con2, 9, abdata_sort_decending,   0, 0
	listTest_eq_ran con2, 8, abdata_sort_decending,   0, 1
	listTest_eq_ran con2, 5, abdata_sort_decending,   2, 5
	listTest_eq_ran con2, 0, abdata_sort_decending,   8, 8
	
	//整列済み挿入
	//挿入後に、挿入した値の equal_range がどうなるか
	listTest_sorted_insert con2, 9,  true, abdata_sort_decending,    0, 1
	listTest_sorted_insert con2, 8,  true, abdata_sort_decending,    0, 2
	listTest_sorted_insert con2, 7, false, abdata_sort_decending,    1, 2
	listTest_sorted_insert con2, 5,  true, abdata_sort_decending,    2, 6
	listTest_sorted_insert con2, 0,  true, abdata_sort_decending,    8, 9
	
	//整列済みの除去
	//除去後に、除去された値の equal_range がどうなるか
	listTest_sorted_erase con2, 9,  1, abdata_sort_decending,    0, 0
	listTest_sorted_erase con2, 5,  1, abdata_sort_decending,    2, 4
	listTest_sorted_erase con2, 3, 99, abdata_sort_decending,    5, 5
	listTest_sorted_erase con2, 0, 99, abdata_sort_decending,    8, 8
	
	logmes "list test completed."
	return
	
#global

	listTest_main
