#ifndef ig_abdata_dict_hsp
#define ig_abdata_dict_hsp

#module abdata_dict keys_, vals_, hash_, size_, capa_

/**
keys_, vals, hash_:
	いずれも長さ capa_ の配列変数。この3つを合わせてルート配列と呼ぶ。
	キー keys_(h) に対応する値が変数 vals_(h) に保存される。
	hash_(h) はキー keys_(h) のハッシュ値。
	ただし、空き要素の hash_(h) には特殊な定数 hash_(empty|erase) が割り当てられる。
	
capa_:
	上述の通り、ルート配列の長さ。
	
size_:
	辞書が実際に持っている要素の個数。
	すなわち、ルート配列のなかで hash_is_legal(hash_(h)) となる要素の個数。
//*/

#define assert_unreachable assert : end 1
#define size_of_int 4
#define int_max 0x7FFFFFF
#define true 1
#define false 0

// hash_ の値の分類
#define ctype hash_is_legal(%1) ((%1) >= 0)
#define hash_empty  (-1)
#define hash_erased (-2)

// 衝突時のポリシー
#enum global dict_conflict_keep = 0
#enum global dict_conflict_update
#enum global dict_conflict_abort

#define ctype dict_conflict_is_valid(%1) \
	(dict_conflict_keep <= (%1) && (%1) <= dict_conflict_abort)

// 線型走査するときのスキップ量
#define step 3

// 再構成する積載率の閾値
#define threshold_load_factor 0.8

#define global dict_delete(%1) delmod %1

#define global dict_new(%1, %2 = 4, %3 = 0) \
	newmod %1, abdata_dict@, %2, %3

/*
キャパシティの計算式
(%1) 個の要素を挿入した後に rehash を生じない最小限のキャパシティが好ましい。
stepの倍数は、線型走査で全要素に渡れなくなるので避ける。
*/
#define ctype dict_calc_capa(%1) \
	limit(int(double(%1) / threshold_load_factor / (step - 1)) * step + 1, 13, int_max)

#modinit int vtype, int expected_size

	dict_init thismod, vtype, expected_size
	return getaptr(thismod)
	
#modfunc dict_init int vtype, int expected_size

	assert expected_size >= 0
	capa_ = dict_calc_capa(expected_size)
	
	size_ = 0
	sdim keys_, , capa_
	dimtype vals_, vtype, capa_
	dim hash_, capa_
	memset hash_, 0xFF, capa_ * size_of_int
	return
	
#modcfunc dict_vartype
	return vartype(vals_)
	
#modcfunc dict_capacity
	return capa_
	
#modcfunc dict_size
	return size_
	
#modcfunc dict_load_factor int inc
	return double(size_ + inc) / capa_
	
#modcfunc dict_hash var key
	return ((hash_v(key) \ capa_) + capa_) \ capa_
	
// Is the (%2)th element busy?
#define ctype dict_is_busy_elem(%1, %2) \
	hash_is_legal(hash_(%2))
	
#modcfunc dict_needs_rebuild int inc
	return dict_load_factor(thismod, inc) >= threshold_load_factor
	
#modfunc dict_auto_rebuild int inc
	if ( dict_needs_rebuild(thismod, inc) ) {
		dict_rebuild thismod
	}
	return
	
#modfunc dict_rebuild  \
	local tmp_keys, local tmp_vals, local key, local val, local tmp_cnt
	
	dict_copy_to_alist thismod, tmp_keys, tmp_vals
	tmp_cnt = size_
	
	dict_init thismod, vartype(vals_), capa_ * step
	dict_chain_alist thismod, tmp_keys, tmp_vals, tmp_cnt
	return
	
#modfunc dict_chain var src, int conflict_policy, \
	local key, local val
	
	dict_auto_rebuild thismod, dict_size(src)
	
	repeat dict_capacity(src)
		if ( dict_is_busy_elem(src, cnt) ) {
			dict_dup_kv_at src, cnt, key, val
			dict_insert thismod, key, val, conflict_policy
		}
	loop
	return
	
#modcfunc dict_find_index var key,  \
	local h, local h_key, local i
	
	h_key = dict_hash(thismod, key)
	h = h_key
	for i, 0, capa_
		if ( dict_is_busy_elem(thismod, h) ) {
			if ( hash_(h) == h_key ) { if ( keys_(h) == key ) {
				return h
			} }
		}
		h = (h + step) \ capa_
	next
	return -1
	
#modcfunc dict_has_key var key
	return ( dict_find_index(thismod, key) >= 0 )
	
#modfunc dict_insert var key, var val, int conflict_policy, \
	local h, local h_bak, local i
	
	dict_auto_rebuild thismod, 1
	h = dict_hash(thismod, key)
	h_bak = h
	for i, 0, capa_
		if ( dict_is_busy_elem(thismod, h) ) {
			// Conflicts?
			if ( hash_(h) == h_bak ) { if ( keys_(h) == key ) {
				switch ( conflict_policy )
					case dict_conflict_update:
						vals_(h) = val
						swbreak
					case dict_conflict_keep:
						swbreak
					//case dict_conflict_abort:
					default: assert_unreachable
				swend
				return
			} }
			
			// Walk to find space
			h = (h + step) \ capa_
			_continue
			
		} else {
			keys_(h) = key
			vals_(h) = val
			hash_(h) = h_bak
			size_ ++
			return
		}
		assert
	next
	assert_unreachable
	
#modfunc dict_erase var key
	
	if ( dict_find_index(thismod, key) >= 0 ) {
		hash_(stat) = hash_erased
		size_ --
		return true
	}
	return false
	
#modcfunc dict_try_get var result, var key

	if ( dict_find_index(thismod, key) >= 0 ) {
		result = vals_(stat)
		return true
	}
	return false
	
#modcfunc dict_get var key
	return vals_(dict_find_index(thismod, key))
	
#modcfunc dict_try_dup array ref, var key

	if ( dict_find_index(thismod, key) >= 0 ) {
		dup ref, vals_(stat)
		return true
	} else {
		return false
	}
	
#define global ctype dict_ref(%1, %2) \
	ref_ref_expr_template_2(dict_ref__, %1, %2)
	
#modcfunc dict_ref__ array ref, var key
	dup ref, vals_(dict_find_index(thismod, key))
	return 0
	
#modfunc dict_iter_init var h
	h = 0
	return
	
#modcfunc dict_iter_next_kv var h, var key, var value
	
	while ( h < capa_ )
		if ( dict_is_busy_elem(thismod, h) ) {
			dict_dup_kv_at thismod, h, key, value
			h ++
			return true
		}
		h ++
	wend
	return false
	
#define global dict_iter_kv(%1, %2, %3) %titer \
	declvar@__abdata _cat@__abdata(%i,@__tmp)                         :\
	dict_iter_init %1, _cat@__abdata(%p,@__tmp)                       :\
	declvar@__abdata %2                                               :\
	declvar@__abdata %3                                               :\
	while ( dict_iter_next_kv(%1, _cat@__abdata(%p,@__tmp), %2, %3) ) :\
	//
	
#define global dict_iter_kv_end %titer \
	wend :\
	%o0  :\
	//
	
#modcfunc dict_is_subset_of var rhs,  \
	local key, local val, local rhs_val

	if ( size_ == 0 ) { return true }
	if ( size_ > dict_size(rhs) ) { return false }
	if ( dict_vartype(thismod) != dict_vartype(rhs) ) { return false }
	dict_iter_kv thismod, key, val
		if ( dict_try_dup(rhs, rhs_val, key) == 0 ) { return false }
		if ( abdata_hom_cmp(val, rhs_val) != 0 ) { return false }
	dict_iter_kv_end
	return true
	
#modcfunc dict_equals var rhs

	if ( size_ != dict_size(rhs) ) { return false }
	return dict_is_subset_of(thismod, rhs)
	
#modfunc dict_intersect_keys var rhs, array keys,  \
	local keys_len, local key, local val
	
	sdim keys, , limit(size_, dict_size(rhs), int_max)
	dict_iter_kv thismod, key, val
		if ( dict_has_key(rhs, key) ) {
			keys(keys_len) = key
			keys_len ++
		}
	dict_iter_kv_end
	return keys_len
	
#modfunc dict_copy_to_alist array keys, array vals,  \
	local key, local val, local i
	
	sdim keys, , size_
	dimtype vals, vartype(vals_), size_
	dict_iter_kv thismod, key, val
		keys(i) = key
		vals(i) = val
		i ++
	dict_iter_kv_end
	assert i == size_
	return size_
	
#modfunc dict_chain_alist array keys, array vals, int len, int conflict_policy,  \
	local key, local val
	
	repeat len
		dict_insert thismod, keys(cnt), vals(cnt), conflict_policy
	loop
	return
	
#modfunc dict_dup_kv_at int h, var key, var val

	assert 0 <= h && h < capa_
	assert dict_is_busy_elem(thismod, h)
	dup key, keys_(h)
	dup val, vals_(h)
	return
	
#global

#endif
