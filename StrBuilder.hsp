#ifndef ig_str_builder_hsp
#define ig_str_builder_hsp

#module StrBuilder buf_, len_, capacity_, expand_size_

#define BufSize_Default 4096

//------------------------------------------------
// [i] 構築
//------------------------------------------------
#define global StrBuilder_new(%1, %2 = -1, %3 = -1) \
	newmod %1, StrBuilder@, %2, %3

#modinit int p2, int p3,  \
	local defsize, local expandSize
	
	if ( p2 <= 0 ) { defsize = BufSize_Default } else { defsize = p2 }
	if ( p3 <= 0 ) { expand_size_ = BufSize_Default } else { expand_size_ = p3 }
	
	len_ = 0
	capacity_ = defsize
	sdim buf_, capacity_
	return
	
//------------------------------------------------
// [i] 解体
//------------------------------------------------
#define global StrBuilder_delete(%1) delmod %1

//------------------------------------------------
// 文字列を設定する
//------------------------------------------------
#modfunc StrBuilder_set str string
	StrBuilder_clear thismod
	StrBuilder_append   thismod, string
	return
	
//------------------------------------------------
// 文字列を後ろに追加する
//------------------------------------------------
#modfunc StrBuilder_append str src, int _lenToAppend
	
	if ( _lenToAppend ) { tmpLen = _lenToAppend } else { tmpLen = strlen(src) }
	
	// overflow しないように
	if ( capacity_ <= len_ + tmpLen ) {
		StrBuilder_expand_capacity thismod, tmpLen
	}
	
	// 書き込む (poke 側が src を strlen する分無駄がある)
	poke buf_, len_, src
	len_ += strsize
	assert (strsize == tmpLen)
	return
	
#modfunc StrBuilder_append_v var src, int _lenToAppend
	if ( _lenToAppend ) { tmpLen = _lenToAppend } else { tmpLen = strlen(src) }
	
	if ( capacity_ <= len_ + tmpLen ) {
		StrBuilder_expand_capacity thismod, tmpLen
	}
	
	// 書き込む ('\0' を含める)
	memcpy buf_, src, tmpLen + 1, len_
	len_ += tmpLen
	return
	
// 最後に追加された文字列の長さ
#defcfunc StrBuilder_strsize
	return tmpLen

//------------------------------------------------
// 文字を連結する
//------------------------------------------------
#modfunc StrBuilder_append_char int c
	if ( c == 0 ) { return }
	
	// over-flow しないように
	if ( capacity_ <= len_ + 1 ) {
		StrBuilder_expand_capacity thismod, 1
	}
	
	// 書き込む
	wpoke buf_, len_, c
	len_ ++
	return
	
//------------------------------------------------
// 文字列を後ろから削る
//------------------------------------------------
#modfunc StrBuilder_erase_back int sizeErase
	if ( sizeErase <= 0 ) { return }
	
	len_ -= sizeErase
	if ( len_ < 0 ) { len_ = 0 }
	
	// 終端文字を置く
	poke buf_, len_, 0
	
	return
	
//------------------------------------------------
// バッファを確保する
//------------------------------------------------
#modfunc StrBuilder_ensure_capacity int size
	if ( capacity_ < size ) {
		capacity_ = size + expand_size_
		memexpand buf_, capacity_
	}
	return
	
#modfunc StrBuilder_expand_capacity int size
	capacity_ += size + expand_size_
	memexpand buf_, capacity_
	return
	
//------------------------------------------------
// 文字列を変数バッファに複写する
//------------------------------------------------
#modfunc StrBuilder_copy_to var buf
	if ( vartype( buf ) != vartype("str") ) {
		sdim      buf, len_ + 1
	} else {
		memexpand buf, len_ + 1
	}
	memcpy buf, buf_, len_ + 1
	return
	
//------------------------------------------------
// [i] 文字列の長さを返す
//------------------------------------------------
#modcfunc StrBuilder_length
	return len_

//------------------------------------------------
// 確保済みバッファの大きさを返す
//------------------------------------------------
#modcfunc StrBuilder_capacity
	return capacity_
	
//------------------------------------------------
// 文字列を関数形式で返す(非推奨)
//------------------------------------------------
#modcfunc StrBuilder_str
	return buf_
	
#modcfunc StrBuilder_data_ptr
	return varptr(buf_)
	
//------------------------------------------------
// [i] 初期化
//------------------------------------------------
#modfunc StrBuilder_clear
	poke buf_
	len_ = 0
	return
	
//------------------------------------------------
// [i] 連結
//------------------------------------------------
#modfunc StrBuilder_chain var src,  local data, local len
	len = StrBuilder_length(src)
	dupptr data, StrBuilder_data_ptr(src), len + 1, vartype("str")
	StrBuilder_append_v thismod, data, len
	return
	
//------------------------------------------------
// [i] 複写
//------------------------------------------------
#modfunc StrBuilder_copy var src
	StrBuilder_clear thismod
	StrBuilder_chain thismod, src
	return
	
#global

#endif
