#ifndef ig_str_builder_hsp
#define ig_str_builder_hsp

//capacity: バッファに格納できるバイト数、null終端は除く。

#module StrBuilder buf_, len_, capacity_

#define BufSize_Default 4096

//------------------------------------------------
// [i] 構築
//------------------------------------------------
#define global StrBuilder_new(%1, %2 = 0) \
	newmod %1, StrBuilder@, %2

#modinit int def_capa
	
	capacity_ = limit(def_capa, BufSize_Default, def_capa)
	sdim buf_, capacity_ + 1
	return
	
//------------------------------------------------
// [i] 解体
//------------------------------------------------
#define global StrBuilder_delete(%1) delmod %1

//------------------------------------------------
// 文字列を設定する
//------------------------------------------------
#modfunc StrBuilder_set str s
	StrBuilder_clear  thismod
	StrBuilder_append thismod, s
	return
	
//------------------------------------------------
// 文字列を後ろに追加する
//------------------------------------------------
#modfunc StrBuilder_append str src, int src_len
	
	if ( src_len ) { tmpLen = src_len } else { tmpLen = strlen(src) }
	
	StrBuilder_ensure_capacity thismod, len_ + tmpLen
	
	// 書き込む (poke 側が src を strlen する分無駄がある)
	poke buf_, len_, src
	len_ += strsize
	assert (strsize == tmpLen)
	return
	
#modfunc StrBuilder_append_v var src, int src_len

	if ( src_len ) { tmpLen = src_len } else { tmpLen = strlen(src) }
	
	StrBuilder_ensure_capacity thismod, len_ + tmpLen
	
	// 書き込む ('\0' を含める)
	memcpy buf_, src, tmpLen + 1, len_
	len_ += tmpLen
	return
	
// 最後に追加された文字列の長さ
#defcfunc StrBuilder_strsize
	return tmpLen

//------------------------------------------------
// 文字を連結する
//------------------------------------------------
#modfunc StrBuilder_append_char int c
	if ( c == 0 ) { return }
	
	StrBuilder_ensure_capacity thismod, len_ + 1
	
	// 書き込む
	wpoke buf_, len_, c
	len_ ++
	return
	
//------------------------------------------------
// 文字列を後ろから削る
//------------------------------------------------
#modfunc StrBuilder_erase_back int size
	if ( size <= 0 ) { return }
	
	len_ = limit(len_ - size, 0, len_)
	poke buf_, len_, 0
	return
	
//------------------------------------------------
// バッファを確保する
//------------------------------------------------
#modfunc StrBuilder_ensure_capacity int new_capa
	if ( capacity_ < new_capa ) {
		capacity_ = limit(new_capa, capacity_ * 2, 0x7FFFFFFF)
		memexpand buf_, capacity_ + 1
	}
	return
	
#modfunc StrBuilder_expand_capacity int size
	capacity_ +=size
	memexpand buf_, capacity_ + 1
	return
	
//------------------------------------------------
// 文字列を変数バッファに複写する
//------------------------------------------------
#modfunc StrBuilder_copy_to var buf
	if ( vartype( buf ) != vartype("str") ) {
		sdim      buf, len_ + 1
	} else {
		memexpand buf, len_ + 1
	}
	memcpy buf, buf_, len_ + 1
	return
	
//------------------------------------------------
// [i] 文字列の長さを返す
//------------------------------------------------
#modcfunc StrBuilder_length
	return len_

//------------------------------------------------
// 確保済みのキャパシティを返す
//------------------------------------------------
#modcfunc StrBuilder_capacity
	return capacity_
	
//------------------------------------------------
// 文字列を関数形式で返す(非推奨)
//------------------------------------------------
#modcfunc StrBuilder_str
	return buf_
	
#modcfunc StrBuilder_data_ptr
	return varptr(buf_)
	
//------------------------------------------------
// [i] 初期化
//------------------------------------------------
#modfunc StrBuilder_clear
	poke buf_
	len_ = 0
	return
	
//------------------------------------------------
// [i] 連結
//------------------------------------------------
#modfunc StrBuilder_chain var src,  \
	local src_buf, local len
	
	len = StrBuilder_length(src)
	dupptr src_buf, StrBuilder_data_ptr(src), len + 1, vartype("str")
	StrBuilder_append_v thismod, src_buf, len
	return
	
//------------------------------------------------
// [i] 複写
//------------------------------------------------
#modfunc StrBuilder_copy var src
	StrBuilder_clear thismod
	StrBuilder_chain thismod, src
	return
	
#global

#endif
