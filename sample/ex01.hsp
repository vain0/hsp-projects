#include "../tab_ctrl.hsp"

#const global IDW_TABTOP 10

// 取得用マクロ
#define tIndex ActTabIndex(mTab)
#define actwin ActTabWinID(mTab)

#uselib "user32.dll"
#func   GetWindowRect "GetWindowRect" int,int

	screen 0, 400, 300			// メインのウィンドウ
	syscolor 15 : boxf : color
	title "Tabmod SAMPLE"
	
//	タブコントロールを設置する。
//	p4 は bgscr 命令で作成するウィンドウID の先頭になります。
//	例えば、下のように [10(IDW_TABTOP)] でタブ項目が4個あると、
//	{10, 11, 12, 13} のウィンドウを使用します。
//	また、[3] でタブの項目が 8個あると、{3, 4, 5, 6, 7, 8, 9, 10} が使われます。
//	別で使用するウィンドウID値と被らないよう注意してください。
	pos 50, 50 : CreateTab mTab, 300, 200, IDW_TABTOP, 0x4000	// TCS_TOOLTIPS
	hTab = stat		// タブコントロールのハンドルを取得
	
	// アイテムの挿入 ( モジュール変数, つまみの文字列, 挿入位置 )
	// 挿入位置を省略すると、一番後ろ( 通常は右 )に追加します。
	
	InsertTab mTab, "AAA", 0
//		スクリーン上にオブジェクトを置く感覚で処理を書きます。
//		カレントウィンドウはタブアイテムに使用されたウィンドウになっています。
		pos 50, 50 : mes "A"
	
	InsertTab mTab, "BBB"
		pos 50, 50 : mes "B"
	
	InsertTab mTab, "CCC"
		pos 50, 50 : mes "C"
	
	InsertTab mTab, "DDD"
		pos 50, 50 : mes "D"
	
	DeleteTab mTab, 1			// TabIndex の 1 ("BBB") を削除します。
	
	InsertTab mTab, "EEE", 0	// 0 …… 左端
		pos 50, 50 : mes "E"
		
//	タブの項目追加が終わったら、タブ内に貼り付けた bgscr 命令が非表示状態になっているので、
//	表示されるよう gsel 命令を指定してください。
//	CreateTab 命令で指定した ウィンドウID の初期値と同じ値を指定します。
	gsel IDW_TABTOP, 1
	
//	ウィンドウID 0 に描画先を戻します。
	gsel
	
//	タブ項目切り替え処理時のメッセージ
	oncmd gosub *Notify, 0x004E			// WM_NOTIFY
	
//	タブの挿入・削除テスト用 ( これは無くても良い )
	gsel 0
	objsize 75, 28
	pos  5, 5 : button gosub "Insert !", *TabInsertEdit
	pos 85, 5 : button gosub "Delete !", *TabDelete
	
	screen 1, 230, 160, ( 2 | 4 | 8 )
	syscolor 15 : boxf : color
	title "InsertTab - Edit"
	sdim String   , 64, 2
	sdim InsertPos, 64
	bCheck = 1
	pos  10,  8 : mes "つまみ   : "
	pos 100,  5 : input String(0), 100, 25, 3
	pos  10, 38 : mes "内容     : "
	pos 100, 35 : input String(1), 100, 25, 12
	pos  10, 68 : mes "挿入位置 : "
	pos 100, 65 : input InsertPos, 60, 25, 2
	
	objsize 160, 25
	pos  10, 95 : chkbox "挿入後アクティブにする", bCheck
	
	objsize 80, 28
	pos 120,125 : button gosub "OK", *TabInsert
	
	gsel 0
	onexit goto *exit
	stop
	
// タブ項目切り替え処理部分
// 重要！！
*Notify
	dupptr nmhdr, lparam, 12	// NMHDR 構造体
	
;	logmes "nmhdr = "+ nmhdr(0) +", "+ nmhdr(1) +", "+ nmhdr(2)
	
	if ( nmhdr(0) == hTab ) {	// タブコントロールからの通知 
		
		// 選択アイテムの変更
		if ( nmhdr(2) == -551 ) {
			ChangeTab mTab		// 選択されているアイテムに切り替える。ActiveTabIndex を返す
			
			// 変更の結果を出力 ( actIndex, つまみ文字列, windowID )
			logmes "ChangeTab 「"+ GetTabStrItem(mTab, tIndex) +"」 { ( Index, WinID ) == ( "+ tIndex +", "+ ItoW(mTab, tIndex) +" ) }"
			
			gsel 0, 0	// 元々の screen命令 のウィンドウID 0に描画先を戻します。
			
		// ショートカットメニュー
		} else : if ( nmhdr(2) == -5 ) {
			// ポップアップさせる
			n = NumberOfTabInPoint(mTab, ginfo(0), ginfo(1))
			if ( n >= 0 ) {
				logmes "ShortMenu Popup! [No."+ n +"]"
			}
		}
		
	}
	return
	
//	不要な部分
*TabInsertEdit
	gsel 1, 1
	objsel 0
	return
	
*TabInsert			// アイテムの追加
	// 挿入位置を決定 (空なら -1(最後) にする)
	n = int(InsertPos) - (InsertPos == "")
	
	InsertTab mTab, String(0), n	// 挿入
	n = stat						// 使用した ウィンドウID - TabStartID を返す
	if ( n < 0 ) { return }			// エラー
	
	pos 50, 50 : mes String(1)		// 内部に書き込む
	
	// チェックされていたらアクティブにする
	if ( bCheck ) {
		ShowTab mTab, WtoI(mTab, n)
	}
	
	gsel 1, -1
	gsel 0, 1
	return
	
*TabDelete			// タブの削除
	DeleteTab mTab, tIndex		// アクティブなタブを削除する
	ShowTab   mTab, tIndex - 1	// 前のタブをアクティブにする
	gsel 0
	return stat
	
// 終了時の処理 ( 不要 )
*exit
	if ( wparam != 0 ) {
		gsel wparam, -1
		stop
	}
	end
	